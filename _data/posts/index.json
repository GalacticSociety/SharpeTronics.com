{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling.","banner_image":{"data":{"id":28,"attributes":{"name":"pillars-face-art.webp","alternativeText":"pillars-face-art.webp","caption":"pillars-face-art.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_pillars-face-art.webp","hash":"thumbnail_pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":2.66,"url":"/uploads/thumbnail_pillars_face_art_973bf824dd.webp"}},"hash":"pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","size":33.33,"url":"/uploads/pillars_face_art_973bf824dd.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.006Z","updatedAt":"2022-07-10T00:03:13.006Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":29,"attributes":{"tag":"Contribute","createdAt":"2022-07-26T23:35:32.216Z","updatedAt":"2022-07-26T23:35:32.216Z","locale":"en","posts":{"data":[{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling.","banner_image":{"data":{"id":28,"attributes":{"name":"pillars-face-art.webp","alternativeText":"pillars-face-art.webp","caption":"pillars-face-art.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_pillars-face-art.webp","hash":"thumbnail_pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":2.66,"url":"/uploads/thumbnail_pillars_face_art_973bf824dd.webp"}},"hash":"pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","size":33.33,"url":"/uploads/pillars_face_art_973bf824dd.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.006Z","updatedAt":"2022-07-10T00:03:13.006Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":29,"attributes":{"tag":"Contribute","createdAt":"2022-07-26T23:35:32.216Z","updatedAt":"2022-07-26T23:35:32.216Z","locale":"en","posts":{"data":[{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling.","banner_image":{"data":{"id":28,"attributes":{"name":"pillars-face-art.webp","alternativeText":"pillars-face-art.webp","caption":"pillars-face-art.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_pillars-face-art.webp","hash":"thumbnail_pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":2.66,"url":"/uploads/thumbnail_pillars_face_art_973bf824dd.webp"}},"hash":"pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","size":33.33,"url":"/uploads/pillars_face_art_973bf824dd.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.006Z","updatedAt":"2022-07-10T00:03:13.006Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":29,"attributes":{"tag":"Contribute","createdAt":"2022-07-26T23:35:32.216Z","updatedAt":"2022-07-26T23:35:32.216Z","locale":"en","posts":{"data":[{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling.","banner_image":{"data":{"id":28,"attributes":{"name":"pillars-face-art.webp","alternativeText":"pillars-face-art.webp","caption":"pillars-face-art.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_pillars-face-art.webp","hash":"thumbnail_pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":2.66,"url":"/uploads/thumbnail_pillars_face_art_973bf824dd.webp"}},"hash":"pillars_face_art_973bf824dd","ext":".webp","mime":"image/webp","size":33.33,"url":"/uploads/pillars_face_art_973bf824dd.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.006Z","updatedAt":"2022-07-10T00:03:13.006Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":29,"attributes":{"tag":"Contribute","createdAt":"2022-07-26T23:35:32.216Z","updatedAt":"2022-07-26T23:35:32.216Z","locale":"en","posts":{"data":[{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":4,"attributes":{"title":"Big Startups Without Big Tech","subheading":"Liquid Democracy Empowering Network Users","content":"Welcome to the Blockchain Internet called DFINITY. In my spare time, I have been tinkering and learning **Motoko**. It is a language built for the Internet Computer (IC) that can be used to interface applications, websites and other various software.\n\nMotoko is a programming typed language that compiles into WebAssembly (WA) and is created by **Andreas Rossberg** & the **Dfinity Foundation**\n\n> \"To offer a seamless developer experience, we wanted to create a specialized programming language, called Motoko, that is designed to directly support the programming model of the Internet Computer, making it easier to efficiently build applications and take advantage of some of the more unusual features of this platform.\" -Andreas Rossberg\n\n\nTo begin development of the open decentralized Internet called Dfinity, I needed to install the Software Developer Kit (SDK).\nI ran into a few challenges initially with using the **\"dfx\"** command after installing. I needed to setup my PATH and let **.bashrc** know where the program dfx is installed.\nKnowing how to do this is important and enables more flow with development. Normally, these things are done by default when installing the program, but in unique scenarios, the installed location of that application may not be added to your .bashrc or profile.\n\n\n### Let's begin,\n\n0. Open up Linux terminal\n1. `nano ~/.bashrc`\n2. Scroll down to end of page and type the following code to add \"dfx\" command to your profile or .bashrc.\n3. Rerun the updated .bashrc or .profile script via . ~/.bashrc, then test *\"dfx --version\"* again.\n```\n# DFINITY MOTOKO\nexport PATH=$HOME/bin:$PATH.\n```\n![Bashrc Edit for Linux](/uploads/2021/motoko_bashrc-edit.webp \"Motoko Bashrc Edit\")\n\nWhat we have enabled here is the command **\"dfx --version\"** to work without having to type the entire path to execute the dfx program.\nAs an example, without setting up our PATH, we would type the full path of where the program is located in the terminal; this would be **\"/home/username/bin/dfx --version\"** to run the program each time we need it.\n\n*If for some reason your dfx installed in a different location, all you need to do is run \"which dfx\" and it will provide the installed location of that program.*\n\nI hope this quick tutorial aided in your Linux administration talents. I will begin sharing short tutorials like this. It will enable my own glossary of experience and also aid in other curious programmers and Linux users seeking answers. üññ\n\n#### Sources:\n* Internet Computer Genesis Launch Event - <https://youtu.be/xiupEw4MfxY> - Premiered May 7, 2021\n* The Dfinity Foundation - <https://dfinity.org/>\n* Adding a Path to the Linux PATH variable - <https://www.baeldung.com/linux/path-variable> - May 13th, 2021","createdAt":"2022-05-24T18:42:06.163Z","updatedAt":"2022-10-11T22:12:00.118Z","publishedAt":"2022-05-24T18:42:07.859Z","locale":"en","layout":"post","slug":"big-startups-without-big-tech","banner_image_description":"Transparent cubes and a high tech lighting backdrop","banner_image":{"data":{"id":29,"attributes":{"name":"decentralized.webp","alternativeText":"decentralized.webp","caption":"decentralized.webp","width":840,"height":630,"formats":{"thumbnail":{"name":"thumbnail_decentralized.webp","hash":"thumbnail_decentralized_385bd5a376","ext":".webp","mime":"image/webp","path":null,"width":208,"height":156,"size":2.21,"url":"/uploads/thumbnail_decentralized_385bd5a376.webp"}},"hash":"decentralized_385bd5a376","ext":".webp","mime":"image/webp","size":41.65,"url":"/uploads/decentralized_385bd5a376.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.067Z","updatedAt":"2022-07-10T00:03:13.067Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":6,"attributes":{"tag":"Blockchain","createdAt":"2022-05-24T18:37:55.927Z","updatedAt":"2022-05-24T18:38:40.924Z","locale":"en","posts":{"data":[{"id":4,"attributes":{"title":"Big Startups Without Big Tech","subheading":"Liquid Democracy Empowering Network Users","content":"Welcome to the Blockchain Internet called DFINITY. In my spare time, I have been tinkering and learning **Motoko**. It is a language built for the Internet Computer (IC) that can be used to interface applications, websites and other various software.\n\nMotoko is a programming typed language that compiles into WebAssembly (WA) and is created by **Andreas Rossberg** & the **Dfinity Foundation**\n\n> \"To offer a seamless developer experience, we wanted to create a specialized programming language, called Motoko, that is designed to directly support the programming model of the Internet Computer, making it easier to efficiently build applications and take advantage of some of the more unusual features of this platform.\" -Andreas Rossberg\n\n\nTo begin development of the open decentralized Internet called Dfinity, I needed to install the Software Developer Kit (SDK).\nI ran into a few challenges initially with using the **\"dfx\"** command after installing. I needed to setup my PATH and let **.bashrc** know where the program dfx is installed.\nKnowing how to do this is important and enables more flow with development. Normally, these things are done by default when installing the program, but in unique scenarios, the installed location of that application may not be added to your .bashrc or profile.\n\n\n### Let's begin,\n\n0. Open up Linux terminal\n1. `nano ~/.bashrc`\n2. Scroll down to end of page and type the following code to add \"dfx\" command to your profile or .bashrc.\n3. Rerun the updated .bashrc or .profile script via . ~/.bashrc, then test *\"dfx --version\"* again.\n```\n# DFINITY MOTOKO\nexport PATH=$HOME/bin:$PATH.\n```\n![Bashrc Edit for Linux](/uploads/2021/motoko_bashrc-edit.webp \"Motoko Bashrc Edit\")\n\nWhat we have enabled here is the command **\"dfx --version\"** to work without having to type the entire path to execute the dfx program.\nAs an example, without setting up our PATH, we would type the full path of where the program is located in the terminal; this would be **\"/home/username/bin/dfx --version\"** to run the program each time we need it.\n\n*If for some reason your dfx installed in a different location, all you need to do is run \"which dfx\" and it will provide the installed location of that program.*\n\nI hope this quick tutorial aided in your Linux administration talents. I will begin sharing short tutorials like this. It will enable my own glossary of experience and also aid in other curious programmers and Linux users seeking answers. üññ\n\n#### Sources:\n* Internet Computer Genesis Launch Event - <https://youtu.be/xiupEw4MfxY> - Premiered May 7, 2021\n* The Dfinity Foundation - <https://dfinity.org/>\n* Adding a Path to the Linux PATH variable - <https://www.baeldung.com/linux/path-variable> - May 13th, 2021","createdAt":"2022-05-24T18:42:06.163Z","updatedAt":"2022-10-11T22:12:00.118Z","publishedAt":"2022-05-24T18:42:07.859Z","locale":"en","layout":"post","slug":"big-startups-without-big-tech","banner_image_description":"Transparent cubes and a high tech lighting backdrop","banner_image":{"data":{"id":29,"attributes":{"name":"decentralized.webp","alternativeText":"decentralized.webp","caption":"decentralized.webp","width":840,"height":630,"formats":{"thumbnail":{"name":"thumbnail_decentralized.webp","hash":"thumbnail_decentralized_385bd5a376","ext":".webp","mime":"image/webp","path":null,"width":208,"height":156,"size":2.21,"url":"/uploads/thumbnail_decentralized_385bd5a376.webp"}},"hash":"decentralized_385bd5a376","ext":".webp","mime":"image/webp","size":41.65,"url":"/uploads/decentralized_385bd5a376.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.067Z","updatedAt":"2022-07-10T00:03:13.067Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":6,"attributes":{"tag":"Blockchain","createdAt":"2022-05-24T18:37:55.927Z","updatedAt":"2022-05-24T18:38:40.924Z","locale":"en","posts":{"data":[{"id":4,"attributes":{"title":"Big Startups Without Big Tech","subheading":"Liquid Democracy Empowering Network Users","content":"Welcome to the Blockchain Internet called DFINITY. In my spare time, I have been tinkering and learning **Motoko**. It is a language built for the Internet Computer (IC) that can be used to interface applications, websites and other various software.\n\nMotoko is a programming typed language that compiles into WebAssembly (WA) and is created by **Andreas Rossberg** & the **Dfinity Foundation**\n\n> \"To offer a seamless developer experience, we wanted to create a specialized programming language, called Motoko, that is designed to directly support the programming model of the Internet Computer, making it easier to efficiently build applications and take advantage of some of the more unusual features of this platform.\" -Andreas Rossberg\n\n\nTo begin development of the open decentralized Internet called Dfinity, I needed to install the Software Developer Kit (SDK).\nI ran into a few challenges initially with using the **\"dfx\"** command after installing. I needed to setup my PATH and let **.bashrc** know where the program dfx is installed.\nKnowing how to do this is important and enables more flow with development. Normally, these things are done by default when installing the program, but in unique scenarios, the installed location of that application may not be added to your .bashrc or profile.\n\n\n### Let's begin,\n\n0. Open up Linux terminal\n1. `nano ~/.bashrc`\n2. Scroll down to end of page and type the following code to add \"dfx\" command to your profile or .bashrc.\n3. Rerun the updated .bashrc or .profile script via . ~/.bashrc, then test *\"dfx --version\"* again.\n```\n# DFINITY MOTOKO\nexport PATH=$HOME/bin:$PATH.\n```\n![Bashrc Edit for Linux](/uploads/2021/motoko_bashrc-edit.webp \"Motoko Bashrc Edit\")\n\nWhat we have enabled here is the command **\"dfx --version\"** to work without having to type the entire path to execute the dfx program.\nAs an example, without setting up our PATH, we would type the full path of where the program is located in the terminal; this would be **\"/home/username/bin/dfx --version\"** to run the program each time we need it.\n\n*If for some reason your dfx installed in a different location, all you need to do is run \"which dfx\" and it will provide the installed location of that program.*\n\nI hope this quick tutorial aided in your Linux administration talents. I will begin sharing short tutorials like this. It will enable my own glossary of experience and also aid in other curious programmers and Linux users seeking answers. üññ\n\n#### Sources:\n* Internet Computer Genesis Launch Event - <https://youtu.be/xiupEw4MfxY> - Premiered May 7, 2021\n* The Dfinity Foundation - <https://dfinity.org/>\n* Adding a Path to the Linux PATH variable - <https://www.baeldung.com/linux/path-variable> - May 13th, 2021","createdAt":"2022-05-24T18:42:06.163Z","updatedAt":"2022-10-11T22:12:00.118Z","publishedAt":"2022-05-24T18:42:07.859Z","locale":"en","layout":"post","slug":"big-startups-without-big-tech","banner_image_description":"Transparent cubes and a high tech lighting backdrop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false,"gallery":{"data":[{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}]},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":49,"attributes":{"name":"galactic-andromeda-workstation.webp","alternativeText":"galactic-andromeda-workstation.webp","caption":"galactic-andromeda-workstation.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_galactic-andromeda-workstation.webp","hash":"thumbnail_galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":8.21,"url":"/uploads/thumbnail_galactic_andromeda_workstation_393e5d94d4.webp"}},"hash":"galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","size":88.48,"url":"/uploads/galactic_andromeda_workstation_393e5d94d4.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-12T22:13:47.583Z","updatedAt":"2022-10-12T22:13:47.583Z"}}},"localizations":{"data":[]}}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white.","banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white.","banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white."}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle.","banner_image":{"data":{"id":26,"attributes":{"name":"ejabberd-in-the-jungle.webp","alternativeText":"ejabberd-in-the-jungle.webp","caption":"ejabberd-in-the-jungle.webp","width":800,"height":533,"formats":{"thumbnail":{"name":"thumbnail_ejabberd-in-the-jungle.webp","hash":"thumbnail_ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":12.89,"url":"/uploads/thumbnail_ejabberd_in_the_jungle_8a9f00e089.webp"}},"hash":"ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","size":193.12,"url":"/uploads/ejabberd_in_the_jungle_8a9f00e089.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-06-28T05:05:25.886Z","updatedAt":"2022-06-28T05:05:25.886Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white."}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":24,"attributes":{"tag":"XMPP","createdAt":"2022-06-28T04:59:04.893Z","updatedAt":"2022-06-28T05:01:59.802Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":26,"attributes":{"tag":"Ejabberd","createdAt":"2022-06-28T04:59:48.449Z","updatedAt":"2022-06-28T05:01:46.373Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"title":"Our Terms & Conditions","subheading":"Our rules and regulations.","content":"<h2><strong>Terms and Conditions</strong></h2>\n\n<p>Welcome to SharpeTronics!</p>\n\n<p>These terms and conditions outline the rules and regulations for the use of SharpeTronics's Website, located at https://www.sharpetronics.com.</p>\n\n<p>By accessing this website we assume you accept these terms and conditions. Do not continue to use SharpeTronics if you do not agree to take all of the terms and conditions stated on this page.</p>\n\n<p>The following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \"Client\", \"You\" and \"Your\" refers to you, the person log on this website and compliant to the Company‚Äôs terms and conditions. \"The Company\", \"Ourselves\", \"We\", \"Our\" and \"Us\", refers to our Company. \"Party\", \"Parties\", or \"Us\", refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client‚Äôs needs in respect of provision of the Company‚Äôs stated services, in accordance with and subject to, prevailing law of Netherlands. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.</p>\n\n<h3><strong>Cookies</strong></h3>\n\n<p>We employ the use of cookies. By accessing SharpeTronics, you agreed to use cookies in agreement with the SharpeTronics's Privacy Policy. </p>\n\n<p>Most interactive websites use cookies to let us retrieve the user‚Äôs details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.</p>\n\n<h3><strong>License</strong></h3>\n\n<p>Unless otherwise stated, SharpeTronics and/or its licensors own the intellectual property rights for all material on SharpeTronics. All intellectual property rights are reserved. You may access this from SharpeTronics for your own personal use subjected to restrictions set in these terms and conditions.</p>\n\n<p>You must not:</p>\n<ul>\n    <li>Republish material from SharpeTronics</li>\n    <li>Sell, rent or sub-license material from SharpeTronics</li>\n    <li>Reproduce, duplicate or copy material from SharpeTronics</li>\n    <li>Redistribute content from SharpeTronics</li>\n</ul>\n\n<p>This Agreement shall begin on the date hereof.</p>\n\n<p>Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. SharpeTronics does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of SharpeTronics,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, SharpeTronics shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.</p>\n\n<p>SharpeTronics reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.</p>\n\n<p>You warrant and represent that:</p>\n\n<ul>\n    <li>You are entitled to post the Comments on our website and have all necessary licenses and consents to do so;</li>\n    <li>The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party;</li>\n    <li>The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy</li>\n    <li>The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity.</li>\n</ul>\n\n<p>You hereby grant SharpeTronics a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.</p>\n\n<h3><strong>Hyperlinking to our Content</strong></h3>\n\n<p>The following organizations may link to our Website without prior written approval:</p>\n\n<ul>\n    <li>Government agencies;</li>\n    <li>Search engines;</li>\n    <li>News organizations;</li>\n    <li>Online directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and</li>\n    <li>System wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site.</li>\n</ul>\n\n<p>These organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party‚Äôs site.</p>\n\n<p>We may consider and approve other link requests from the following types of organizations:</p>\n\n<ul>\n    <li>commonly-known consumer and/or business information sources;</li>\n    <li>dot.com community sites;</li>\n    <li>associations or other groups representing charities;</li>\n    <li>online directory distributors;</li>\n    <li>internet portals;</li>\n    <li>accounting, law and consulting firms; and</li>\n    <li>educational institutions and trade associations.</li>\n</ul>\n\n<p>We will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of SharpeTronics; and (d) the link is in the context of general resource information.</p>\n\n<p>These organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party‚Äôs site.</p>\n\n<p>If you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to SharpeTronics. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.</p>\n\n<p>Approved organizations may hyperlink to our Website as follows:</p>\n\n<ul>\n    <li>By use of our corporate name; or</li>\n    <li>By use of the uniform resource locator being linked to; or</li>\n    <li>By use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party‚Äôs site.</li>\n</ul>\n\n<p>No use of SharpeTronics's logo or other artwork will be allowed for linking absent a trademark license agreement.</p>\n\n<h3><strong>iFrames</strong></h3>\n\n<p>Without prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.</p>\n\n<h3><strong>Content Liability</strong></h3>\n\n<p>We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.</p>\n\n<h3><strong>Your Privacy</strong></h3>\n\n<p>Please read Privacy Policy</p>\n\n<h3><strong>Reservation of Rights</strong></h3>\n\n<p>We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it‚Äôs linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.</p>\n\n<h3><strong>Removal of links from our website</strong></h3>\n\n<p>If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.</p>\n\n<p>We do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.</p>\n\n<h3><strong>Disclaimer</strong></h3>\n\n<p>To the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:</p>\n\n<ul>\n    <li>limit or exclude our or your liability for death or personal injury;</li>\n    <li>limit or exclude our or your liability for fraud or fraudulent misrepresentation;</li>\n    <li>limit any of our or your liabilities in any way that is not permitted under applicable law; or</li>\n    <li>exclude any of our or your liabilities that may not be excluded under applicable law.</li>\n</ul>\n\n<p>The limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.</p>\n\n<p>As long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.</p>","createdAt":"2022-05-24T19:10:35.588Z","updatedAt":"2022-10-11T22:20:58.472Z","publishedAt":"2022-05-24T19:11:47.498Z","locale":"en","layout":"post","slug":"our-terms-and-conditions","banner_image_description":"an image gradient of blue and white.","banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":21,"attributes":{"tag":"Terms & Conditions","createdAt":"2022-05-24T19:11:00.524Z","updatedAt":"2022-06-28T05:02:23.148Z","locale":"en","posts":{"data":[{"id":9,"attributes":{"title":"Our Terms & Conditions","subheading":"Our rules and regulations.","content":"<h2><strong>Terms and Conditions</strong></h2>\n\n<p>Welcome to SharpeTronics!</p>\n\n<p>These terms and conditions outline the rules and regulations for the use of SharpeTronics's Website, located at https://www.sharpetronics.com.</p>\n\n<p>By accessing this website we assume you accept these terms and conditions. Do not continue to use SharpeTronics if you do not agree to take all of the terms and conditions stated on this page.</p>\n\n<p>The following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \"Client\", \"You\" and \"Your\" refers to you, the person log on this website and compliant to the Company‚Äôs terms and conditions. \"The Company\", \"Ourselves\", \"We\", \"Our\" and \"Us\", refers to our Company. \"Party\", \"Parties\", or \"Us\", refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client‚Äôs needs in respect of provision of the Company‚Äôs stated services, in accordance with and subject to, prevailing law of Netherlands. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.</p>\n\n<h3><strong>Cookies</strong></h3>\n\n<p>We employ the use of cookies. By accessing SharpeTronics, you agreed to use cookies in agreement with the SharpeTronics's Privacy Policy. </p>\n\n<p>Most interactive websites use cookies to let us retrieve the user‚Äôs details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.</p>\n\n<h3><strong>License</strong></h3>\n\n<p>Unless otherwise stated, SharpeTronics and/or its licensors own the intellectual property rights for all material on SharpeTronics. All intellectual property rights are reserved. You may access this from SharpeTronics for your own personal use subjected to restrictions set in these terms and conditions.</p>\n\n<p>You must not:</p>\n<ul>\n    <li>Republish material from SharpeTronics</li>\n    <li>Sell, rent or sub-license material from SharpeTronics</li>\n    <li>Reproduce, duplicate or copy material from SharpeTronics</li>\n    <li>Redistribute content from SharpeTronics</li>\n</ul>\n\n<p>This Agreement shall begin on the date hereof.</p>\n\n<p>Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. SharpeTronics does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of SharpeTronics,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, SharpeTronics shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.</p>\n\n<p>SharpeTronics reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.</p>\n\n<p>You warrant and represent that:</p>\n\n<ul>\n    <li>You are entitled to post the Comments on our website and have all necessary licenses and consents to do so;</li>\n    <li>The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party;</li>\n    <li>The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy</li>\n    <li>The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity.</li>\n</ul>\n\n<p>You hereby grant SharpeTronics a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.</p>\n\n<h3><strong>Hyperlinking to our Content</strong></h3>\n\n<p>The following organizations may link to our Website without prior written approval:</p>\n\n<ul>\n    <li>Government agencies;</li>\n    <li>Search engines;</li>\n    <li>News organizations;</li>\n    <li>Online directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and</li>\n    <li>System wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site.</li>\n</ul>\n\n<p>These organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party‚Äôs site.</p>\n\n<p>We may consider and approve other link requests from the following types of organizations:</p>\n\n<ul>\n    <li>commonly-known consumer and/or business information sources;</li>\n    <li>dot.com community sites;</li>\n    <li>associations or other groups representing charities;</li>\n    <li>online directory distributors;</li>\n    <li>internet portals;</li>\n    <li>accounting, law and consulting firms; and</li>\n    <li>educational institutions and trade associations.</li>\n</ul>\n\n<p>We will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of SharpeTronics; and (d) the link is in the context of general resource information.</p>\n\n<p>These organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party‚Äôs site.</p>\n\n<p>If you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to SharpeTronics. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.</p>\n\n<p>Approved organizations may hyperlink to our Website as follows:</p>\n\n<ul>\n    <li>By use of our corporate name; or</li>\n    <li>By use of the uniform resource locator being linked to; or</li>\n    <li>By use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party‚Äôs site.</li>\n</ul>\n\n<p>No use of SharpeTronics's logo or other artwork will be allowed for linking absent a trademark license agreement.</p>\n\n<h3><strong>iFrames</strong></h3>\n\n<p>Without prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.</p>\n\n<h3><strong>Content Liability</strong></h3>\n\n<p>We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.</p>\n\n<h3><strong>Your Privacy</strong></h3>\n\n<p>Please read Privacy Policy</p>\n\n<h3><strong>Reservation of Rights</strong></h3>\n\n<p>We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it‚Äôs linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.</p>\n\n<h3><strong>Removal of links from our website</strong></h3>\n\n<p>If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.</p>\n\n<p>We do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.</p>\n\n<h3><strong>Disclaimer</strong></h3>\n\n<p>To the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:</p>\n\n<ul>\n    <li>limit or exclude our or your liability for death or personal injury;</li>\n    <li>limit or exclude our or your liability for fraud or fraudulent misrepresentation;</li>\n    <li>limit any of our or your liabilities in any way that is not permitted under applicable law; or</li>\n    <li>exclude any of our or your liabilities that may not be excluded under applicable law.</li>\n</ul>\n\n<p>The limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.</p>\n\n<p>As long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.</p>","createdAt":"2022-05-24T19:10:35.588Z","updatedAt":"2022-10-11T22:20:58.472Z","publishedAt":"2022-05-24T19:11:47.498Z","locale":"en","layout":"post","slug":"our-terms-and-conditions","banner_image_description":"an image gradient of blue and white.","banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":21,"attributes":{"tag":"Terms & Conditions","createdAt":"2022-05-24T19:11:00.524Z","updatedAt":"2022-06-28T05:02:23.148Z","locale":"en","posts":{"data":[{"id":9,"attributes":{"title":"Our Terms & Conditions","subheading":"Our rules and regulations.","content":"<h2><strong>Terms and Conditions</strong></h2>\n\n<p>Welcome to SharpeTronics!</p>\n\n<p>These terms and conditions outline the rules and regulations for the use of SharpeTronics's Website, located at https://www.sharpetronics.com.</p>\n\n<p>By accessing this website we assume you accept these terms and conditions. Do not continue to use SharpeTronics if you do not agree to take all of the terms and conditions stated on this page.</p>\n\n<p>The following terminology applies to these Terms and Conditions, Privacy Statement and Disclaimer Notice and all Agreements: \"Client\", \"You\" and \"Your\" refers to you, the person log on this website and compliant to the Company‚Äôs terms and conditions. \"The Company\", \"Ourselves\", \"We\", \"Our\" and \"Us\", refers to our Company. \"Party\", \"Parties\", or \"Us\", refers to both the Client and ourselves. All terms refer to the offer, acceptance and consideration of payment necessary to undertake the process of our assistance to the Client in the most appropriate manner for the express purpose of meeting the Client‚Äôs needs in respect of provision of the Company‚Äôs stated services, in accordance with and subject to, prevailing law of Netherlands. Any use of the above terminology or other words in the singular, plural, capitalization and/or he/she or they, are taken as interchangeable and therefore as referring to same.</p>\n\n<h3><strong>Cookies</strong></h3>\n\n<p>We employ the use of cookies. By accessing SharpeTronics, you agreed to use cookies in agreement with the SharpeTronics's Privacy Policy. </p>\n\n<p>Most interactive websites use cookies to let us retrieve the user‚Äôs details for each visit. Cookies are used by our website to enable the functionality of certain areas to make it easier for people visiting our website. Some of our affiliate/advertising partners may also use cookies.</p>\n\n<h3><strong>License</strong></h3>\n\n<p>Unless otherwise stated, SharpeTronics and/or its licensors own the intellectual property rights for all material on SharpeTronics. All intellectual property rights are reserved. You may access this from SharpeTronics for your own personal use subjected to restrictions set in these terms and conditions.</p>\n\n<p>You must not:</p>\n<ul>\n    <li>Republish material from SharpeTronics</li>\n    <li>Sell, rent or sub-license material from SharpeTronics</li>\n    <li>Reproduce, duplicate or copy material from SharpeTronics</li>\n    <li>Redistribute content from SharpeTronics</li>\n</ul>\n\n<p>This Agreement shall begin on the date hereof.</p>\n\n<p>Parts of this website offer an opportunity for users to post and exchange opinions and information in certain areas of the website. SharpeTronics does not filter, edit, publish or review Comments prior to their presence on the website. Comments do not reflect the views and opinions of SharpeTronics,its agents and/or affiliates. Comments reflect the views and opinions of the person who post their views and opinions. To the extent permitted by applicable laws, SharpeTronics shall not be liable for the Comments or for any liability, damages or expenses caused and/or suffered as a result of any use of and/or posting of and/or appearance of the Comments on this website.</p>\n\n<p>SharpeTronics reserves the right to monitor all Comments and to remove any Comments which can be considered inappropriate, offensive or causes breach of these Terms and Conditions.</p>\n\n<p>You warrant and represent that:</p>\n\n<ul>\n    <li>You are entitled to post the Comments on our website and have all necessary licenses and consents to do so;</li>\n    <li>The Comments do not invade any intellectual property right, including without limitation copyright, patent or trademark of any third party;</li>\n    <li>The Comments do not contain any defamatory, libelous, offensive, indecent or otherwise unlawful material which is an invasion of privacy</li>\n    <li>The Comments will not be used to solicit or promote business or custom or present commercial activities or unlawful activity.</li>\n</ul>\n\n<p>You hereby grant SharpeTronics a non-exclusive license to use, reproduce, edit and authorize others to use, reproduce and edit any of your Comments in any and all forms, formats or media.</p>\n\n<h3><strong>Hyperlinking to our Content</strong></h3>\n\n<p>The following organizations may link to our Website without prior written approval:</p>\n\n<ul>\n    <li>Government agencies;</li>\n    <li>Search engines;</li>\n    <li>News organizations;</li>\n    <li>Online directory distributors may link to our Website in the same manner as they hyperlink to the Websites of other listed businesses; and</li>\n    <li>System wide Accredited Businesses except soliciting non-profit organizations, charity shopping malls, and charity fundraising groups which may not hyperlink to our Web site.</li>\n</ul>\n\n<p>These organizations may link to our home page, to publications or to other Website information so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products and/or services; and (c) fits within the context of the linking party‚Äôs site.</p>\n\n<p>We may consider and approve other link requests from the following types of organizations:</p>\n\n<ul>\n    <li>commonly-known consumer and/or business information sources;</li>\n    <li>dot.com community sites;</li>\n    <li>associations or other groups representing charities;</li>\n    <li>online directory distributors;</li>\n    <li>internet portals;</li>\n    <li>accounting, law and consulting firms; and</li>\n    <li>educational institutions and trade associations.</li>\n</ul>\n\n<p>We will approve link requests from these organizations if we decide that: (a) the link would not make us look unfavorably to ourselves or to our accredited businesses; (b) the organization does not have any negative records with us; (c) the benefit to us from the visibility of the hyperlink compensates the absence of SharpeTronics; and (d) the link is in the context of general resource information.</p>\n\n<p>These organizations may link to our home page so long as the link: (a) is not in any way deceptive; (b) does not falsely imply sponsorship, endorsement or approval of the linking party and its products or services; and (c) fits within the context of the linking party‚Äôs site.</p>\n\n<p>If you are one of the organizations listed in paragraph 2 above and are interested in linking to our website, you must inform us by sending an e-mail to SharpeTronics. Please include your name, your organization name, contact information as well as the URL of your site, a list of any URLs from which you intend to link to our Website, and a list of the URLs on our site to which you would like to link. Wait 2-3 weeks for a response.</p>\n\n<p>Approved organizations may hyperlink to our Website as follows:</p>\n\n<ul>\n    <li>By use of our corporate name; or</li>\n    <li>By use of the uniform resource locator being linked to; or</li>\n    <li>By use of any other description of our Website being linked to that makes sense within the context and format of content on the linking party‚Äôs site.</li>\n</ul>\n\n<p>No use of SharpeTronics's logo or other artwork will be allowed for linking absent a trademark license agreement.</p>\n\n<h3><strong>iFrames</strong></h3>\n\n<p>Without prior approval and written permission, you may not create frames around our Webpages that alter in any way the visual presentation or appearance of our Website.</p>\n\n<h3><strong>Content Liability</strong></h3>\n\n<p>We shall not be hold responsible for any content that appears on your Website. You agree to protect and defend us against all claims that is rising on your Website. No link(s) should appear on any Website that may be interpreted as libelous, obscene or criminal, or which infringes, otherwise violates, or advocates the infringement or other violation of, any third party rights.</p>\n\n<h3><strong>Your Privacy</strong></h3>\n\n<p>Please read Privacy Policy</p>\n\n<h3><strong>Reservation of Rights</strong></h3>\n\n<p>We reserve the right to request that you remove all links or any particular link to our Website. You approve to immediately remove all links to our Website upon request. We also reserve the right to amen these terms and conditions and it‚Äôs linking policy at any time. By continuously linking to our Website, you agree to be bound to and follow these linking terms and conditions.</p>\n\n<h3><strong>Removal of links from our website</strong></h3>\n\n<p>If you find any link on our Website that is offensive for any reason, you are free to contact and inform us any moment. We will consider requests to remove links but we are not obligated to or so or to respond to you directly.</p>\n\n<p>We do not ensure that the information on this website is correct, we do not warrant its completeness or accuracy; nor do we promise to ensure that the website remains available or that the material on the website is kept up to date.</p>\n\n<h3><strong>Disclaimer</strong></h3>\n\n<p>To the maximum extent permitted by applicable law, we exclude all representations, warranties and conditions relating to our website and the use of this website. Nothing in this disclaimer will:</p>\n\n<ul>\n    <li>limit or exclude our or your liability for death or personal injury;</li>\n    <li>limit or exclude our or your liability for fraud or fraudulent misrepresentation;</li>\n    <li>limit any of our or your liabilities in any way that is not permitted under applicable law; or</li>\n    <li>exclude any of our or your liabilities that may not be excluded under applicable law.</li>\n</ul>\n\n<p>The limitations and prohibitions of liability set in this Section and elsewhere in this disclaimer: (a) are subject to the preceding paragraph; and (b) govern all liabilities arising under the disclaimer, including liabilities arising in contract, in tort and for breach of statutory duty.</p>\n\n<p>As long as the website and the information and services on the website are provided free of charge, we will not be liable for any loss or damage of any nature.</p>","createdAt":"2022-05-24T19:10:35.588Z","updatedAt":"2022-10-11T22:20:58.472Z","publishedAt":"2022-05-24T19:11:47.498Z","locale":"en","layout":"post","slug":"our-terms-and-conditions","banner_image_description":"an image gradient of blue and white."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-11-25T18:54:23.296Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","banner_image":{"data":{"id":48,"attributes":{"name":"quantum-qt5.webp","alternativeText":"quantum-qt5.webp","caption":"quantum-qt5.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_quantum-qt5.webp","hash":"thumbnail_quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":15.03,"url":"/uploads/thumbnail_quantum_qt5_41fa19c935.webp"}},"hash":"quantum_qt5_41fa19c935","ext":".webp","mime":"image/webp","size":218.16,"url":"/uploads/quantum_qt5_41fa19c935.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-11T22:34:36.705Z","updatedAt":"2022-10-11T22:34:36.705Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"tag":"Qt5","createdAt":"2022-05-24T18:47:09.822Z","updatedAt":"2022-05-24T18:47:09.822Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"tag":"ARM64","createdAt":"2022-05-24T18:48:59.059Z","updatedAt":"2022-05-24T18:49:33.499Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"tag":"Raspberry Pi 400","createdAt":"2022-05-24T18:50:50.880Z","updatedAt":"2022-05-24T18:50:50.880Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":15,"attributes":{"tag":"X11","createdAt":"2022-05-24T18:52:58.701Z","updatedAt":"2022-05-24T18:52:58.701Z","locale":"en","posts":{"data":[{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","banner_image":{"data":{"id":30,"attributes":{"name":"linux-admin.webp","alternativeText":"linux-admin.webp","caption":"linux-admin.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_linux-admin.webp","hash":"thumbnail_linux_admin_0def8999f2","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.06,"url":"/uploads/thumbnail_linux_admin_0def8999f2.webp"}},"hash":"linux_admin_0def8999f2","ext":".webp","mime":"image/webp","size":56.06,"url":"/uploads/linux_admin_0def8999f2.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.075Z","updatedAt":"2022-07-10T00:03:13.075Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":30,"attributes":{"tag":"Security","createdAt":"2022-07-26T23:46:28.774Z","updatedAt":"2022-07-26T23:46:28.774Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","banner_image":{"data":{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia."}},{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board."}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","banner_image":{"data":{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":8,"attributes":{"tag":"VPS","createdAt":"2022-05-24T18:43:17.764Z","updatedAt":"2022-05-24T18:43:17.764Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":22,"attributes":{"tag":"Drone CI","createdAt":"2022-06-28T04:44:07.447Z","updatedAt":"2022-06-28T05:02:13.008Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":23,"attributes":{"tag":"Docker","createdAt":"2022-06-28T04:45:46.384Z","updatedAt":"2022-06-28T05:02:05.555Z","locale":"en","posts":{"data":[{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle.","banner_image":{"data":{"id":26,"attributes":{"name":"ejabberd-in-the-jungle.webp","alternativeText":"ejabberd-in-the-jungle.webp","caption":"ejabberd-in-the-jungle.webp","width":800,"height":533,"formats":{"thumbnail":{"name":"thumbnail_ejabberd-in-the-jungle.webp","hash":"thumbnail_ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":12.89,"url":"/uploads/thumbnail_ejabberd_in_the_jungle_8a9f00e089.webp"}},"hash":"ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","size":193.12,"url":"/uploads/ejabberd_in_the_jungle_8a9f00e089.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-06-28T05:05:25.886Z","updatedAt":"2022-06-28T05:05:25.886Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white.","banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white."}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle.","banner_image":{"data":{"id":26,"attributes":{"name":"ejabberd-in-the-jungle.webp","alternativeText":"ejabberd-in-the-jungle.webp","caption":"ejabberd-in-the-jungle.webp","width":800,"height":533,"formats":{"thumbnail":{"name":"thumbnail_ejabberd-in-the-jungle.webp","hash":"thumbnail_ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":12.89,"url":"/uploads/thumbnail_ejabberd_in_the_jungle_8a9f00e089.webp"}},"hash":"ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","size":193.12,"url":"/uploads/ejabberd_in_the_jungle_8a9f00e089.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-06-28T05:05:25.886Z","updatedAt":"2022-06-28T05:05:25.886Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white."}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":24,"attributes":{"tag":"XMPP","createdAt":"2022-06-28T04:59:04.893Z","updatedAt":"2022-06-28T05:01:59.802Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":26,"attributes":{"tag":"Ejabberd","createdAt":"2022-06-28T04:59:48.449Z","updatedAt":"2022-06-28T05:01:46.373Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":24,"attributes":{"tag":"XMPP","createdAt":"2022-06-28T04:59:04.893Z","updatedAt":"2022-06-28T05:01:59.802Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle.","banner_image":{"data":{"id":26,"attributes":{"name":"ejabberd-in-the-jungle.webp","alternativeText":"ejabberd-in-the-jungle.webp","caption":"ejabberd-in-the-jungle.webp","width":800,"height":533,"formats":{"thumbnail":{"name":"thumbnail_ejabberd-in-the-jungle.webp","hash":"thumbnail_ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":12.89,"url":"/uploads/thumbnail_ejabberd_in_the_jungle_8a9f00e089.webp"}},"hash":"ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","size":193.12,"url":"/uploads/ejabberd_in_the_jungle_8a9f00e089.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-06-28T05:05:25.886Z","updatedAt":"2022-06-28T05:05:25.886Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white."}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":24,"attributes":{"tag":"XMPP","createdAt":"2022-06-28T04:59:04.893Z","updatedAt":"2022-06-28T05:01:59.802Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":26,"attributes":{"tag":"Ejabberd","createdAt":"2022-06-28T04:59:48.449Z","updatedAt":"2022-06-28T05:01:46.373Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":26,"attributes":{"tag":"Ejabberd","createdAt":"2022-06-28T04:59:48.449Z","updatedAt":"2022-06-28T05:01:46.373Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle.","banner_image":{"data":{"id":26,"attributes":{"name":"ejabberd-in-the-jungle.webp","alternativeText":"ejabberd-in-the-jungle.webp","caption":"ejabberd-in-the-jungle.webp","width":800,"height":533,"formats":{"thumbnail":{"name":"thumbnail_ejabberd-in-the-jungle.webp","hash":"thumbnail_ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":12.89,"url":"/uploads/thumbnail_ejabberd_in_the_jungle_8a9f00e089.webp"}},"hash":"ejabberd_in_the_jungle_8a9f00e089","ext":".webp","mime":"image/webp","size":193.12,"url":"/uploads/ejabberd_in_the_jungle_8a9f00e089.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-06-28T05:05:25.886Z","updatedAt":"2022-06-28T05:05:25.886Z"}}},"category":{"data":{"id":5,"attributes":{"name":"Devops","createdAt":"2022-06-25T17:30:49.319Z","updatedAt":"2022-06-25T17:30:49.319Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":20,"attributes":{"tag":"Privacy","createdAt":"2022-05-24T19:04:25.700Z","updatedAt":"2022-06-28T05:02:32.666Z","locale":"en","posts":{"data":[{"id":8,"attributes":{"title":"Our Privacy Policy","subheading":"Your data is always yours.","content":"<h2>Privacy Policy for SharpeTronics.com, Inc.</h2>\n\n<p>At SharpeTronics, accessible from https://www.sharpetronics.com, one of our main priorities is the privacy of our visitors. This Privacy Policy document contains types of information that is collected and recorded by SharpeTronics and how we use it.</p>\n\n<p>If you have additional questions or require more information about our Privacy Policy, do not hesitate to contact us.</p>\n\n<p>This Privacy Policy applies only to our online activities and is valid for visitors to our website with regards to the information that they shared and/or collect in SharpeTronics. This policy is not applicable to any information collected offline or via channels other than this website. </p>\n\n<h3>Consent</h3>\n\n<p>By using our website, you hereby consent to our Privacy Policy and agree to its terms.</p>\n\n<h3>Information we collect</h3>\n\n<p>The personal information that you are asked to provide, and the reasons why you are asked to provide it, will be made clear to you at the point we ask you to provide your personal information.</p>\n<p>If you contact us directly, we may receive additional information about you such as your name, email address, phone number, the contents of the message and/or attachments you may send us, and any other information you may choose to provide.</p>\n<p>When you register for an Account, we may ask for your contact information, including items such as name, company name, address, email address, and telephone number.</p>\n\n<h3>How we use your information</h3>\n\n<p>We use the information we collect in various ways, including to:</p>\n\n<ul>\n<li>Provide, operate, and maintain our webste</li>\n<li>Improve, personalize, and expand our webste</li>\n<li>Understand and analyze how you use our webste</li>\n<li>Develop new products, services, features, and functionality</li>\n<li>Communicate with you, either directly or through one of our partners, including for customer service, to provide you with updates and other information relating to the webste, and for marketing and promotional purposes</li>\n<li>Send you emails</li>\n<li>Find and prevent fraud</li>\n</ul>\n\n<h3>Log Files</h3>\n\n<p>SharpeTronics follows a standard procedure of using log files. These files log visitors when they visit websites. All hosting companies do this and a part of hosting services' analytics. The information collected by log files include internet protocol (IP) addresses, browser type, Internet Service Provider (ISP), date and time stamp, referring/exit pages, and possibly the number of clicks. These are not linked to any information that is personally identifiable. The purpose of the information is for analyzing trends, administering the site, tracking users' movement on the website, and gathering demographic information.</p>\n\n<h3>Cookies and Web Beacons</h3>\n\n<p>Like any other website, SharpeTronics uses 'cookies'. These cookies are used to store information including visitors' preferences, and the pages on the website that the visitor accessed or visited. The information is used to optimize the users' experience by customizing our web page content based on visitors' browser type and/or other information.</p>\n\n<p>For more general information on cookies, please read <a href=\"https://www.cookieconsent.com/what-are-cookies/\">\"What Are Cookies\" from Cookie Consent</a>.</p>\n\n\n<h3>Our Advertising Partners</h3>\n\n<p>Some of advertisers on our site may use cookies and web beacons. Our advertising partners are listed below. Each of our advertising partners has their own Privacy Policy for their policies on user data. For easier access, we hyperlinked to their Privacy Policies below.</p>\n\n<ul>\n    <li>\n        <p>Google</p>\n        <p><a href=\"https://policies.google.com/technologies/ads\">https://policies.google.com/technologies/ads</a></p>\n    </li>\n</ul>\n\n<h3>Advertising Partners Privacy Policies</h3>\n\n<P>You may consult this list to find the Privacy Policy for each of the advertising partners of SharpeTronics.</p>\n\n<p>Third-party ad servers or ad networks uses technologies like cookies, JavaScript, or Web Beacons that are used in their respective advertisements and links that appear on SharpeTronics, which are sent directly to users' browser. They automatically receive your IP address when this occurs. These technologies are used to measure the effectiveness of their advertising campaigns and/or to personalize the advertising content that you see on websites that you visit.</p>\n\n<p>Note that SharpeTronics has no access to or control over these cookies that are used by third-party advertisers.</p>\n\n<h3>Third Party Privacy Policies</h3>\n\n<p>SharpeTronics's Privacy Policy does not apply to other advertisers or websites. Thus, we are advising you to consult the respective Privacy Policies of these third-party ad servers for more detailed information. It may include their practices and instructions about how to opt-out of certain options. </p>\n\n<p>You can choose to disable cookies through your individual browser options. To know more detailed information about cookie management with specific web browsers, it can be found at the browsers' respective websites.</p>\n\n<h3>CCPA Privacy Rights (Do Not Sell My Personal Information)</h3>\n\n<p>Under the CCPA, among other rights, California consumers have the right to:</p>\n<p>Request that a business that collects a consumer's personal data disclose the categories and specific pieces of personal data that a business has collected about consumers.</p>\n<p>Request that a business delete any personal data about the consumer that a business has collected.</p>\n<p>Request that a business that sells a consumer's personal data, not sell the consumer's personal data.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>GDPR Data Protection Rights</h3>\n\n<p>We would like to make sure you are fully aware of all of your data protection rights. Every user is entitled to the following:</p>\n<p>The right to access ‚Äì You have the right to request copies of your personal data. We may charge you a small fee for this service.</p>\n<p>The right to rectification ‚Äì You have the right to request that we correct any information you believe is inaccurate. You also have the right to request that we complete the information you believe is incomplete.</p>\n<p>The right to erasure ‚Äì You have the right to request that we erase your personal data, under certain conditions.</p>\n<p>The right to restrict processing ‚Äì You have the right to request that we restrict the processing of your personal data, under certain conditions.</p>\n<p>The right to object to processing ‚Äì You have the right to object to our processing of your personal data, under certain conditions.</p>\n<p>The right to data portability ‚Äì You have the right to request that we transfer the data that we have collected to another organization, or directly to you, under certain conditions.</p>\n<p>If you make a request, we have one month to respond to you. If you would like to exercise any of these rights, please contact us.</p>\n\n<h3>Children's Information</h3>\n\n<p>Another part of our priority is adding protection for children while using the internet. We encourage parents and guardians to observe, participate in, and/or monitor and guide their online activity.</p>\n\n<p>SharpeTronics does not knowingly collect any Personal Identifiable Information from children under the age of 13. If you think that your child provided this kind of information on our website, we strongly encourage you to contact us immediately and we will do our best efforts to promptly remove such information from our records.</p>","createdAt":"2022-05-24T19:09:12.005Z","updatedAt":"2022-10-11T22:20:40.674Z","publishedAt":"2022-05-24T19:09:15.806Z","locale":"en","layout":"post","slug":"our-privacy-policy","banner_image_description":"an image gradient of blue and white."}},{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":24,"attributes":{"tag":"XMPP","createdAt":"2022-06-28T04:59:04.893Z","updatedAt":"2022-06-28T05:01:59.802Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":26,"attributes":{"tag":"Ejabberd","createdAt":"2022-06-28T04:59:48.449Z","updatedAt":"2022-06-28T05:01:46.373Z","locale":"en","posts":{"data":[{"id":13,"attributes":{"title":"Compiling Fresh XMPP Ejabberd Server Binaries 22.05 on Ubuntu 20.04 with Erlang OTP 24","subheading":"Creating and host your own end-to-end encryption Instant Messenger app","content":"# Compiling ejabberd v22.05\n### A XMPP server based on Erlang/OTP 24\n\n**Note 1:** I personally took it upon myself to use the following format [Example-Reference] to *tag* references.\n\nIn this article, I will be sharing a *HOWTO* create your own end-to-end encrypted instant messenger(IM) XMPP service for your Company, family xor community. Having ownership of your data requires **work** and this setup allows any Human in the world to protect their digital data from those who sell it for profit.\n\n> \"Ejabberd is a complete open-source XMPP-based messaging solution that is for all human beings, but ideal for governments, police, military, banks, insurance, finance, and healthcare companies that value privacy and security.\"\n\nThe minimal cost is less than $100 per year and is portable with the *nifty* config option -with-rebar; this option packages the whole app for transport.\n\n### Configure & compile Ejabberd\n\nPlease see [Ejabberd Configure] for setting up your Linux environment.\n\n#### Requirements\n- A remove server that has been hardened [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- Linux CLI knowledge\n- Patience\n\n#### Operating System\n- This article is tested with `cat /etc/os-release` VERSION=\"20.04.4 LTS (Focal Fossa)\"\n\n#### Dependencies:\n- GNU Make `make -v`\n- GCC `sudo apt install build-essential && gcc -v`\n- Libexpat 1.95 or higher `sudo apt install -y expat && libexpat-dev`\n- Libyaml 0.1.4 or higher `sudo apt install -y libyaml-dev`\n- Erlang/OTP 19.3 or higher. We recommend using Erlang OTP 21.2. `sudo apt install -y erlang && erl -v`\n- OpenSSL 1.0.0 or higher, for STARTTLS, SASL and SSL encryption. `sudo apt install -y libssl-dev`\n- Zlib 1.2.3 or higher. Optional. For Zlib Stream Compression `sudo apt install -y zlib1g && zlib1g-dev`\n- ImageMagick‚Äôs Convert program and Ghostscript fonts. Optional. For CAPTCHA challenges. `sudo apt install -y imagemagick`\n\n- PAM library. *Optional*. For PAM Authentication\n- Elixir 1.10.3 or higher. *Optional*. For Elixir Development\n\n#### Extras Deps I needed\n- **PostgreSQL** `sudo apt install -y postgresql postgresql-contrib && sudo systemctl start postgresql.service`\n- **Erlang-dev** I had too also install erlang-dev for *erl_nif.h* was missing `sudo apt install -y erlang-dev`\n- **eunit_autoexport** was missing at compile `sudo apt-get install -y erlang-eunit`\n- **erlang-parsetools** was needed to create and assemble the 22.05.tar.gz. `sudo apt-get install -y erlang-parsetools`\n\n### Clone Ejabberd 22.05\n```\ngit clone https://github.com/processone/ejabberd.git && cd ejabberd\ngit checkout tags/22.05 -b branch-name-example && git status\n```\n**Note 2-3:** the latest stable release is 22.05 on June 21, 2022. Verify you are on branch-name-example.\n\n#### We begin compiling and installng **ejabberd** after the environment is ready\n\nBelow, I had to create my **configure** file with *autogen*. The **configure** options I have included are: postgresql database (default: mysql), zlib compression algos (optional), extra dev tools (optional) and rebar for packaging everything into one portable app.(optional) To see more options, please visit: [Ejabberd Configure](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n\n```\n./autogen.sh\n./configure --enable-pgsql --with-rebar=rebar3 --enable-tools --enable-zlib --enable-debug\nmake rel\n```\n**Note 4-6:** if you want to clean up the make after errors, use *make distclean* for dev files and clean for binaries. You are also able to see all the options for make via `make help`. Make rel creates a static portable binary release; no need to sudo make install, simply launch the app from the directory.\n\n### Eureka! :party-hat\n```\n===> Release successfully assembled: _build/prod/rel/ejabberd\n===> Building release tarball ejabberd-22.05.tar.gz...\n===> Tarball successfully created: _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz\n```\n### Prepare Ejabberd Binary\n\nAfter we have successfully compiled ejabberd binaries on our own system, we have a system to create fresh binaries that are portable on the fly! Furthermore, we rename the ejabberd folder to ejabberd_builder and copy the created tar.gz to desired location.\n\n```\ncd .. && mv ejabberd ejabberd_builder\ncp _build/prod/rel/ejabberd/ejabberd-22.05.tar.gz ~/nodes/\n\n```\n\n### Launch Ejabberd\n\nNext, we untar or extract the data into the appropriate directory.\n```\ncd ~/nodes/ && mkdir ejabberd-20.05\ntar -xvkf ejabberd-20.05.tar.gz -C ./ejabberd-20.05\ncd ejabberd-20.05/ && ls bin/\n./bin/ejabberdctl start\n./bin/ejabberdctl status\n```\n\n> NOW, the hard part... configuration of your fresh ejabberd binaries.\n\nAs you may have noticed, **ejabberdctl** status failed to start. This is because we now have to configure the server.\n\n##### PART II - TBA\n\n### References:\n\n- [Ejabberd Source](https://github.com/processone/ejabberd/blob/22.05/COMPILE.md)\n- [Ejabberd Compile](https://docs.ejabberd.im/admin/installation/#source-code)\n- [Ejabberd Features](https://www.ejabberd.im/)\n- [Ejabberd Configure](https://www.process-one.net/blog/how-to-configure-ejabberd-to-get-100-in-xmpp-compliance-test/)\n- [Linux VPS Hardening](https://www.sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- [OMEMO Extension](https://conversations.im/omemo/)\n- [XMPP Servers](https://xmpp.org/software/servers/)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:58:46.469Z","updatedAt":"2022-10-11T22:35:01.620Z","publishedAt":"2022-06-28T05:07:39.217Z","locale":"en","layout":"post","slug":"compiling-fresh-xmpp-ejabberd-server-binaries-22-05-on-ubuntu-20-04-with-erlang-otp-24","banner_image_description":"A human male swinging above the trees in a jungle."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true,"gallery":{"data":[{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}]},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"localizations":{"data":[]}}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":{"id":11,"attributes":{"createdAt":"2022-11-15T01:31:56.488Z","updatedAt":"2022-11-25T19:57:49.267Z","publishedAt":"2022-11-15T01:31:58.292Z","quantity":3,"description":"A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your ","weight":"3oz","is_featured":true,"slug":"appleeetyyy","locale":"en","layout":"product","subheading":"A for apple ","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"A URL of a publicly-accessible webpage for this product. e.g. https://www.sharpetronics.com/products/2017-02-03-dragon/","unit_price":9,"shipping_price":99,"heading":"Appleeetyyy","part_number":"abc","model_number":"fgh-56hh","condition":"reconditioned","colors":{"data":["white","black","cyan","green","red"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["gold","platinum","silver","cotton","charcoal"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":false}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software"}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-11-25T19:57:41.494Z","publishedAt":"2022-11-05T20:41:54.034Z","quantity":2,"description":"A place to describe the product to your readers. af asdA place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the product to your readers. A place to describe the...","weight":"1oz","is_featured":false,"slug":"chickenplatterrrr-tasteyyum","locale":"en","layout":"product","subheading":"sadfasdf","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","is_shippable":true,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"shipping_price":2,"heading":"chickenplatterrrr tasteyyum","part_number":"asdfasdf","model_number":"dafd ","condition":"new","colors":{"data":["red","blue","white","violet","gray"]},"sizes":{"data":["xs","sm","med","lg","xl"]},"material_types":{"data":["cotton","wool","polyster","nylon","plastic"]},"currency_types":{"data":["USD","CAN","JPN"]},"shipping_rates":{"data":["standard","express"]},"shipping_companies":{"data":["UPS","USPS","FedEx","DHL"]},"is_taxable":true}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph"}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix"}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy.","banner_image":{"data":{"id":49,"attributes":{"name":"galactic-andromeda-workstation.webp","alternativeText":"galactic-andromeda-workstation.webp","caption":"galactic-andromeda-workstation.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_galactic-andromeda-workstation.webp","hash":"thumbnail_galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":8.21,"url":"/uploads/thumbnail_galactic_andromeda_workstation_393e5d94d4.webp"}},"hash":"galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","size":88.48,"url":"/uploads/galactic_andromeda_workstation_393e5d94d4.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-12T22:13:47.583Z","updatedAt":"2022-10-12T22:13:47.583Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":33,"attributes":{"tag":"Repairs","createdAt":"2022-10-12T21:56:24.460Z","updatedAt":"2022-10-12T21:57:09.976Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy.","banner_image":{"data":{"id":49,"attributes":{"name":"galactic-andromeda-workstation.webp","alternativeText":"galactic-andromeda-workstation.webp","caption":"galactic-andromeda-workstation.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_galactic-andromeda-workstation.webp","hash":"thumbnail_galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":8.21,"url":"/uploads/thumbnail_galactic_andromeda_workstation_393e5d94d4.webp"}},"hash":"galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","size":88.48,"url":"/uploads/galactic_andromeda_workstation_393e5d94d4.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-12T22:13:47.583Z","updatedAt":"2022-10-12T22:13:47.583Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":33,"attributes":{"tag":"Repairs","createdAt":"2022-10-12T21:56:24.460Z","updatedAt":"2022-10-12T21:57:09.976Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":34,"attributes":{"tag":"Debugging","createdAt":"2022-10-12T21:58:48.323Z","updatedAt":"2022-10-12T21:58:48.323Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":37,"attributes":{"tag":"Troubleshooting","createdAt":"2022-10-12T22:00:45.257Z","updatedAt":"2022-10-12T22:00:45.257Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":34,"attributes":{"tag":"Debugging","createdAt":"2022-10-12T21:58:48.323Z","updatedAt":"2022-10-12T21:58:48.323Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy.","banner_image":{"data":{"id":49,"attributes":{"name":"galactic-andromeda-workstation.webp","alternativeText":"galactic-andromeda-workstation.webp","caption":"galactic-andromeda-workstation.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_galactic-andromeda-workstation.webp","hash":"thumbnail_galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":8.21,"url":"/uploads/thumbnail_galactic_andromeda_workstation_393e5d94d4.webp"}},"hash":"galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","size":88.48,"url":"/uploads/galactic_andromeda_workstation_393e5d94d4.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-12T22:13:47.583Z","updatedAt":"2022-10-12T22:13:47.583Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":33,"attributes":{"tag":"Repairs","createdAt":"2022-10-12T21:56:24.460Z","updatedAt":"2022-10-12T21:57:09.976Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":34,"attributes":{"tag":"Debugging","createdAt":"2022-10-12T21:58:48.323Z","updatedAt":"2022-10-12T21:58:48.323Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":37,"attributes":{"tag":"Troubleshooting","createdAt":"2022-10-12T22:00:45.257Z","updatedAt":"2022-10-12T22:00:45.257Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":37,"attributes":{"tag":"Troubleshooting","createdAt":"2022-10-12T22:00:45.257Z","updatedAt":"2022-10-12T22:00:45.257Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy.","banner_image":{"data":{"id":49,"attributes":{"name":"galactic-andromeda-workstation.webp","alternativeText":"galactic-andromeda-workstation.webp","caption":"galactic-andromeda-workstation.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_galactic-andromeda-workstation.webp","hash":"thumbnail_galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":8.21,"url":"/uploads/thumbnail_galactic_andromeda_workstation_393e5d94d4.webp"}},"hash":"galactic_andromeda_workstation_393e5d94d4","ext":".webp","mime":"image/webp","size":88.48,"url":"/uploads/galactic_andromeda_workstation_393e5d94d4.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-10-12T22:13:47.583Z","updatedAt":"2022-10-12T22:13:47.583Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"üñ•Ô∏è A Stack Architect, ü¶Ö A Director, üéñÔ∏è A USAF Veteran, üìú Intergalactic Confederation, ‚ö° ·ºÄŒ≥Œ¨œÄŒ∑œÜ·ø∂œÇ","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-25T19:02:01.386Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":33,"attributes":{"tag":"Repairs","createdAt":"2022-10-12T21:56:24.460Z","updatedAt":"2022-10-12T21:57:09.976Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":34,"attributes":{"tag":"Debugging","createdAt":"2022-10-12T21:58:48.323Z","updatedAt":"2022-10-12T21:58:48.323Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":37,"attributes":{"tag":"Troubleshooting","createdAt":"2022-10-12T22:00:45.257Z","updatedAt":"2022-10-12T22:00:45.257Z","locale":"en","posts":{"data":[{"id":16,"attributes":{"title":"Upgrade your Crosshair VI Hero Motherboard Firmware with System76's PopOS!","subheading":"I was doing a bit of yak shaving this morning, and it looks like it might have paid off.","content":"My grandpa always said: \"if it ain't broke, it needs no fixin!\"\n\n   I started having trouble with random occurrences of my computer crashing on both Linux and Window's operating systems. This article details some of the steps I mazed through and will expedite spacetime support for future dilemmas.\n\nAfter tinkering and pondering on the possible reasons, I deduced it down to either the GPU, Motherboard or potentially the PSU voltage irregularities. The GPU & RAM worked like a champ while stress testing them. I was unable to reproduce the random occurrence of this hard crash, and both Ubuntu 22.04 and Windows 10 never provided any error logs I could trace through. After each crash, I would restart and save the logs to maybe find a pattern between all the crashes, but sorting through all this didn't even provide a solution!\n\nThe PopOS! logs:\n```\nsudo journalctl --since today --output=short > ~/Documents/System\\ Logs/today-1.log\njournalctl -p 3 -xb\n```\n\nThe Windows 10 logs:\n```\nWindows key + R \ninput: eventvwr and tap the enter key\nnavigate through the GUI...\n```\n\nTo deduce it further, the physical symptoms were: \n* The computer visuals on screen would freeze for a few seconds and then the monitors would all turn off, but the computer fans and motherboard lights stayed online.\n* No error logs to trace on both Windows or Linux Ubuntu\n* Random occurrences with intense and normal visuals \n* It happened with more than one browser like Firefox and Google Chrome\n\nNormally, I would do a hard reset after it would crash and mistakenly overlooked the error code that was displayed after the crash; anyhow, the QCODE I received was: **08**. Upon further investigation and mazing around with the software bios utilities, I discovered I had a little button that would do all this in a *Flash*.\n\n## Requirements & Safety\n\n* Linux OS; Windows 11 is similar, but the commands are different.\n* Basic electronic principles\n* Always make backups\n* Create a bootable drive in case bootloader messes up after update (see here)\n* Backup procedures in-case BIOS update fails\n* A official manual for your motherboard \n\n*WARNING:* You are soley responsible for your own hardware; this article is the process of how I have successfully troubleshooted my own hardware. \n\n1. Get BIOS & Motherboard Information\n```sudo dmidecode --type 0```\n\n```\n# dmidecode 3.3\nGetting SMBIOS data from sysfs.\nSMBIOS 3.2.0 present.\n\nHandle 0x0000, DMI type 0, 26 bytes\nBIOS Information\n\tVendor: SharpeTronics Inc.\n\tVersion: 1501\n\tRelease Date: 07/3/2017\n\tAddress: 0xF0000\n\tRuntime Size: 64 kB\n\tROM Size: 16 MB\n\tCharacteristics:\n\t\tPCI is supported\n\t\tAPM is supported\n\t\tBIOS is upgradeable\n\t\tBIOS shadowing is allowed\n\t\tBoot from CD is supported\n\t\tSelectable boot is supported\n\t\tBIOS ROM is socketed\n\t\tEDD is supported\n\t\t5.25\"/1.2 MB floppy services are supported (int 13h)\n\t\t3.5\"/720 kB floppy services are supported (int 13h)\n\t\t3.5\"/2.88 MB floppy services are supported (int 13h)\n\t\tPrint screen service is supported (int 5h)\n\t\t8042 keyboard services are supported (int 9h)\n\t\tSerial services are supported (int 14h)\n\t\tPrinter services are supported (int 17h)\n\t\tACPI is supported\n\t\tUSB legacy is supported\n\t\tBIOS boot specification is supported\n\t\tTargeted content distribution is supported\n\t\tUEFI is supported\n\tBIOS Revision: 1.17\n```\n\nThe above output allows us to verify the BIOS\n\n```sudo dmidecode --type 2```\n\n```\nHandle 0x0002, DMI type 2, 15 bytes\nBase Board Information\n\tManufacturer: ASUSTeK COMPUTER INC.\n\tProduct Name: CROSSHAIR VI HERO\n\tVersion: Rev 1.xx\n\tSerial Number: 0x0x0x0x0x0x0x\n\tAsset Tag: Default string\n\tLocation In Chassis: Default string\n\tChassis Handle: 0x0003\n\tType: Motherboard\n\tContained Object Handles: 0\n```\n\n2. Download the Firmware from Manufacturer's Website\n\nNavigate to the firmware page and download the most recent firmware update for your CROSSHAIR VI HERO: [link](#sources)\n\n3. After you download the new firmware, we open & rename the file to **C6H.CAP**, then *duplicate* or move it to the *root* of the *USB device*. \n\nThe instructions are provided by the manufacturer; you may discover this information online or the actual manual shipped with your motherboard. For this use case scenario, the ASUS Crosshair VI Hero motherboard has a BIOS button that sweeps or extracts the file and updates your firmware in about 3-5min with a ~17mb file. \n\n4. Upgrade your Motherboard Firmware\n\nIf you're also upgrading the: ROG CROSSHAIR VI HERO Motherboard to *version 8601*, the page of reference is located in \"**Chapter 2.2 BIOS update utility : USB BIOS Flashback**\".\n\nTo use USB BIOS Flashback:\n```\n1.Download the latest BIOS file from the ASUS website.\n2.Extract and rename the BIOS image file to C6H.CAP.\n3.Copy C6H.CAP to the root directory of your USB storage device.\n4.Turn off the system and connect the USB storage device to the USB BIOS Flashback port.\n5.Press the USB BIOS Flashback button.\n```\n\nThe method above allows an owner to update their motherboard without mazing around in the BIOS software. You simply plug-in the USB device into the **correct port** and **press** the button. \n\nThe button will **blink blue slowly then speed up as time progress's**; I spent about 3-5 minutes flashing the BIOS this way; before, I have had horror stories flashing the BIOS with the BIOS. For example, I was unable to successfully make use of the other two tools the manufacturer provided because the software would bug out. The simplest and most effective method is using a USB BIOS Flashback button that is physically located on your motherboard.\n\n## Other Misc. Testing\n\nSome other things I spent doing before I reached a solution were the following:\n\n* Upgraded all disk drivers\n* Lots of research\n* Re-seated all motherboard connections\n* Cleaned and dusted all dust on the grill and fans.\n* Cleaned and Reapplied thermal paste to CPU\n* Re-seated and clean the GPU\n* Reinstalled Windows and Linux OS\n* Contacted a support channel with another company\n* The bug could be related to AMD's fTPM feature. [link](#sources)\n* ...many more...\n\n In conclusion, the entire machine has been revitalized, including both software and hardware. The bug has been resolved and I can get back to doing other cool stuff and things. In the future, I will include how to repair your bootloader on Ubuntu and Windows after upgrading your BIOS; in the meantime, if you need this ASAP, System76 has a well written article on the topic at hand at: [link](#sources).\n\n### Sources\n\n[Repair Your Linux Bootloaders - System76](https://support.system76.com/articles/bootloader/){:target=\"_blank\"}\n\n[AMD fTPM Stuttering Issues - Toms Hardware](https://www.tomshardware.com/news/amd-issues-fix-and-workaround-for-ftpm-stuttering-issues\n){:target=\"_blank\"}\n\n[ASUS Crosshair VI Hero Drivers & Manuals](https://rog.asus.com/us/motherboards/rog-crosshair/rog-crosshair-vi-hero-model/helpdesk_bios/){:target=\"_blank\"}","createdAt":"2022-10-12T21:57:33.329Z","updatedAt":"2022-10-21T17:38:49.434Z","publishedAt":"2022-10-12T22:01:57.786Z","locale":"en","layout":"post","slug":"upgrade-your-crosshair-vi-hero-motherboard-firmware-with-system76-s-pop-os","banner_image_description":"a fresh computer desk with monitors from the Andromeda Galaxy."}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}],"meta":{"pagination":{"page":1,"pageSize":25,"pageCount":1,"total":13}}}