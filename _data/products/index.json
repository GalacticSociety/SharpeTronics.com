{"data":[{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee","gallery":{"data":[{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}]},"tags":{"data":[{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null,"banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}}]},"product":{"data":{"id":7,"attributes":{"createdAt":"2022-10-02T20:09:10.482Z","updatedAt":"2022-10-02T20:36:28.772Z","publishedAt":"2022-10-02T20:10:07.537Z","date":"2022-10-04","quantity":1,"description":"A place to describe the product to your readers.","weight":"1lb","is_featured":true,"slug":"i-am-a-bananna-product","locale":"en","layout":"product","subheading":"my sppooon is too beiigg","material_type":"gold","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":true,"country_origin":"USA","is_software":false,"banner_image_description":"a short desc. about the banner image","webpage_url":"www.dash.sharpetronics.com","unit_price":1,"currency_type":"USD","shipping_price":1,"shipping_companies":"UPS","heading":"I am a bananna product"}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","date":"2021-07-26","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","comments":null,"name":null}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","date":"2022-06-23","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null,"banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-10-05T23:44:48.110Z","publishedAt":"2022-10-05T22:35:59.376Z","date":"2022-09-01","quantity":2,"description":"A place to describe the product to your readers. af asd","weight":"1oz","is_featured":false,"slug":"chicken-platter","locale":"en","layout":"product","subheading":"sadfasdf","material_type":"e.g. gold and silver","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"currency_type":"USD","shipping_price":2,"shipping_companies":"UPS","heading":"chicken platter"}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee","gallery":{"data":[{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}]},"tags":{"data":[{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":46,"attributes":{"name":"optimus-primed.jpeg","alternativeText":"optimus-primed.jpeg","caption":"optimus-primed.jpeg","width":1536,"height":2048,"formats":{"thumbnail":{"name":"thumbnail_optimus-primed.jpeg","hash":"thumbnail_optimus_primed_886bcb1942","ext":".jpeg","mime":"image/jpeg","path":null,"width":117,"height":156,"size":5.47,"url":"/uploads/thumbnail_optimus_primed_886bcb1942.jpeg"}},"hash":"optimus_primed_886bcb1942","ext":".jpeg","mime":"image/jpeg","size":607.28,"url":"/uploads/optimus_primed_886bcb1942.jpeg","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-13T21:36:24.316Z","updatedAt":"2022-09-13T21:36:24.316Z"}}},"localizations":{"data":[]}}}},"localizations":{"data":[]}}},{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null,"banner_image":{"data":{"id":32,"attributes":{"name":"wv-seneca-rocks-sky.webp","alternativeText":"wv-seneca-rocks-sky.webp","caption":"wv-seneca-rocks-sky.webp","width":840,"height":473,"formats":{"thumbnail":{"name":"thumbnail_wv-seneca-rocks-sky.webp","hash":"thumbnail_wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","path":null,"width":245,"height":138,"size":4.86,"url":"/uploads/thumbnail_wv_seneca_rocks_sky_0d5928baa9.webp"}},"hash":"wv_seneca_rocks_sky_0d5928baa9","ext":".webp","mime":"image/webp","size":133.89,"url":"/uploads/wv_seneca_rocks_sky_0d5928baa9.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.505Z","updatedAt":"2022-07-10T00:03:13.505Z"}}},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":7,"attributes":{"tag":"Linux","createdAt":"2022-05-24T18:41:22.140Z","updatedAt":"2022-05-24T18:41:22.140Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null}},{"id":5,"attributes":{"title":"Linux VPS Hardening","date":"2021-07-26","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","comments":null,"name":null}},{"id":6,"attributes":{"title":"Configure a Static Qt5 from Source on Ubuntu 18.04 with X11 Support","date":"2021-11-11","subheading":"Compiling & Configuring Qt from Source","content":"### Configure, Build, Install & Setup Qt 5.15.2 Source on Ubuntu 18.04 with X11 Support\n\nThis tutorial will teach you how to compile from source via CLI (command-line interface) and enable customization for building Qt5 apps on different operating systems andor hardware architectures like RPI400. \n\nWhen compiling Qt5 yourself, you are empowered with a configuration that is constant throughout the Linux Universe. This process is also very similar with compiling Qt apps on your (AArch64) ARM64 devices like RPi 400, Rock64 & PineBook64.\n\n*Note: This tutorial doesn't include json Qtwebengine*\n\n### What is Qt?\n\"Qt is a cross-platform application development framework for desktop, embedded and mobile.\" [Qt Wiki]\n\n### What is a Static Qt? \nIn general, a static Qt option includes libraries locally. This aids in having an application run on different versions of Linux distros. When the application is compiled, we check the app with *ldd yourapp* to list what the binary is dependent on to run. Essentially, the Qt libraries are included in the binary. Decovar.dev has a great explanation on advantages and disadvantages of building a static Qt. [At last, let's build Qt statically]\n\n### Let's Begin!\n\n#### Remove & purge all Qt packages\n```\nsudo apt -y remove qt5* libqt5* qtcreator && sudo autoremove\n```\n\n#### Download Qt 5.15.2 Source to qt5-sources folder\n```\nmkdir qt5-sources && cd qt5-sources && mkdir build-shadow\n\nwget https://download.qt.io/official_releases/qt/5.15/5.15.2/single/qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Verify MD5 hash\n```\nmd5sum qt-everywhere-src-5.15.2.tar.xz\n```\n```\ne1447db4f06c841d8947f0a6ce83a7b5  qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Un-tar Qt5 archive\n```\ntar xf qt-everywhere-src-5.15.2.tar.xz\n```\n\n##### Move into build-shadow directory to configure your Qt 5.15.2\n```\ncd build-shadow\n```\n\n#### Install Qt5 Minimal Dependencies\n```\nsudo apt update\n\nsudo apt install build-essential libfontconfig1-dev libdbus-1-dev libfreetype6-dev libicu-dev libinput-dev libxkbcommon-dev libsqlite3-dev libssl-dev libpng-dev libjpeg-dev libglib2.0-dev\n```\n\n##### (Optional) Install VC4 Drivers for RPi 4 type devices (i.e. cortex-a53 & cortex-a72)\n```\nsudo apt install libgles2-mesa-dev libgbm-dev libdrm-dev\n```\n#### (Optional) Install X11 Support Dependencies\n```\nsudo apt install libx11-dev libxcb1-dev  libxext-dev libxi-dev libxcomposite-dev libxcursor-dev libxtst-dev libxrandr-dev libfontconfig1-dev libfreetype6-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev  libxcb-glx0-dev  libxcb-keysyms1-dev libxcb-image0-dev  libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev  libxcb-randr0-dev  libxcb-render-util0-dev  libxcb-util0-dev  libxcb-xinerama0-dev  libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev\n```\n\n#### Configure Qt 5.15.2\n```\n../qt-everywhere-src-5.15.2/configure -static -release -openssl-linked -opensource -confirm-license -qt-zlib -qt-libpng -bundled-xcb-xinput \\\n-skip qtlocation -skip qtmacextras -skip qtpurchasing -skip qtscript -skip qtsensors -skip qtserialbus -skip qtserialport -skip qtspeech -skip qtdatavis3d -skip qtdoc -skip qtcharts -skip qtdeclarative -skip qt3d -skip qtwebengine -skip qtandroidextras -skip qtwebview -skip qtgamepad -skip qtquickcontrols -skip qtquickcontrols2 -skip qtremoteobjects -skip qtwebview -skip qtwebchannel -skip qtwebglplugin \\\n-nomake examples -nomake tests  -feature-fontconfig -no-feature-getentropy -v\n```\n\n*If you would like to see a full list of options, we can do **../qt-everywhere-src-5.15.2/configure -h**\n\n##### Make the configuration *(-j 4 is number of cpus you want to use)*\n```\nmake -j 4\n```\n\n##### Install Qt5 into: *(default) /usr/local/*\n```\nsudo make install\n```\n*Note: Check and make sure ./configure has required deps; if you installed the deps, but still receiving errors, remove config.cache and ./configure again.*\n\n**Tip:** *If you want to view your configuration summary, you may do so via nano config.summary from build-shadow directory*\n\n#### Update profile to know where Qt5.15.2 bins are\n```\nnano ~/.bashrc\n```\n\n##### Add this at the bottom of your .bashrc file.\n```\n# set PATH for Qt 5.15.2\nexport PATH=\"/usr/local/Qt-5.15.2/bin:$PATH\"\n```\n\n##### Reload your ~/.bashrc file & create new shell window.\n```\nsource ~/.bashrc\nCTRL+SHIFT+T\nALT+1\nexit\n```\n##### Verify Qt 5.15.2 has been installed\n```\nqmake --version\n```\n\n```\nQMake version 3.1\nUsing Qt version 5.15.2 in /usr/local/Qt-5.15.2/lib\n```\n#### Build your happy Qt5 app\n\n```\n./build.sh\n```\n#### Support & Questions\n[sharpetronics.github](https://github.com/SharpeTronics/sharpetronics.github.io/issues)\n\n![happy little apps](/uploads/2021/bob-ross-happy.gif)\n\n#### References\n[tal.org/rpi](https://www.tal.org/tutorials/building-qt-515-raspberry-pi)\n\n[doc.qt.io/qtmodules](https://doc.qt.io/qt-5/qtmodules.html)\n\n[wiki.qt.io/about](https://wiki.qt.io/About_Qt)\n\n[why-build-qt-statically](https://decovar.dev/blog/2018/02/17/build-qt-statically/#why-build-qt-statically)","createdAt":"2022-05-24T18:58:56.643Z","updatedAt":"2022-10-11T22:35:18.838Z","publishedAt":"2022-05-24T18:58:58.215Z","locale":"en","layout":"post","slug":"configure-a-static-qt5-from-source-on-ubuntu-18-04-with-x11-support","banner_image_description":"A golden circuit board.","comments":null,"name":null}},{"id":11,"attributes":{"title":"How to Setup a Secure Docker Drone Runner with Drone CI","date":"2022-06-23","subheading":"BeeYoop BeeDeepBoom Weeop DEEpaEEya","content":"> BeeYoop BeeDeepBoom Weeop DEEpaEEya\n\nIn general, this article describes how to setup SSL with a Drone Runner. This is part II of a part I series. If you would like to learn how-to setup the Drone Server, please visit: [Setup Drone CI Server](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/).\n\nThis part II creates a pipeline runner with a Docker machine; what that means is, like GitHub Actions, but with Drone super powers. The configuration file is stored as `.drone.yml` in the root of your site directory and drone server uses that application yml file to do a series of commands or actions within the virtual docker machine.\n\nThis is empowering because you can automate a fresh build every time. Also, you create a **drone trigger** for when you push to a branch master as an example. Here is the configuration of all the possible things you can do. [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references I shared below.\n**Note 2:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n- a running drone ci server [see part I](https://www.sharpetronics.com/blog/tutorials/2022/06/23/how-to-setup-a-docker-drone-ci-with-https/)\n\n### Let's Begin!\n\n#### Pull docker image from dockerhub\n`docker pull drone/drone-runner-docker:1`\n\n#### Make public access to repo in drone GUI\nFor testing, I made sure the repo was publicly available.\n\n![Screenshot Drone UI](/uploads/2022/screenshot-drone-gui.webp)\n\n### Launch a Secure Docker Drone Runner\n\nFor the **DRONE_RPC_SECRET** use the same ssl secret we created in Part I. See [Configuration](https://docs.drone.io/runner/docker/configuration/reference/) for a complete list of configuration options.\n\nPlease see the reference to understand what this docker config is doing. That is important for you to do yourself.\n\n```\ndocker run --detach \\\n  --volume=/var/run/docker.sock:/var/run/docker.sock \\\n  --env=DRONE_RPC_PROTO=https \\\n  --env=DRONE_RPC_HOST=drone.example.com \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd8090ea38720fc445eca6 \\\n  --env=DRONE_RUNNER_CAPACITY=2 \\\n  --env=DRONE_RUNNER_NAME=st-runner \\\n  --env=DRONE_UI_USERNAME=youruserhere \\\n  --env=DRONE_UI_PASSWORD=yourpasshere \\\n  --env=DRONE_DEBUG=true \\\n  --env=DRONE_TRACE=true \\\n  --publish=3000:3000 \\\n  --restart=always \\\n  --name=st-drone-runner \\\n  drone/drone-runner-docker:1\n```\n\n#### A Pipeline Config Example\n\nAn example of a custom pipeline I have created. I ain't going to explain this to you in detail; I expect you to determine your own pipeline and this is only for a reference point. Essentially, what you will be doing is launching your own virtual machine for your specific use case scenario.\n\nIn this example, on drone.example.com, I have created a secret pass that needs to be passed to the virtual machine so I can package the build aka **_site** only, then auto push to www_data branch on my git server. Furthermore, I **rsync** this data through an ssh tunnel to a **Gitea Pages** server that serves the **WWW or edge** data.\n\n**Note: 3:** The example configuration is a **.drone.yml** file stored in the root of your site project.\n\n```\n---\nkind: pipeline\ntype: docker\nname: build\n\nworkspace:\n  path: /drone/src\n\nplatform:\n  os: linux\n  arch: amd64\n\ntrigger:\n  branch:\n  - master\n\nsteps:\n- name: build-website\n  image: ruby:latest\n  environment:\n    SSH_USER:\n      from_secret: ssh_user\n    SSH_HOST:\n      from_secret: ssh_host\n    NO_HOSTKEY:\n      from_secret: no_hostkey\n  privileged: false\n  volumes:\n    - name: jekyll\n      path: /srv/jekyll\n\n  commands:\n    # general vm information for debugging\n    - whoami\n    - pwd\n    - gem environment\n```\n\n#### Verify\n```\ndocker logs st-drone-runner\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n### References\n- [Drone Runner Configuration](https://docs.drone.io/runner/docker/configuration/reference/)\n- [Drone Runner Docker Installation](https://docs.drone.io/runner/docker/installation/linux/)\n- [Docker Pipelines Overview](https://docs.drone.io/pipeline/docker/overview/)\n- [Unsplash - Nice M Nshuti](https://unsplash.com/@nietzsche99)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Want to buy me a coffee?\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:43:27.074Z","updatedAt":"2022-10-16T16:23:44.426Z","publishedAt":"2022-06-28T04:48:30.304Z","locale":"en","layout":"post","slug":"how-to-setup-a-secure-docker-drone-runner-with-drone-ci","banner_image_description":"a picture of c3po from Star Wars","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":28,"attributes":{"tag":"Open Source","createdAt":"2022-07-26T23:34:50.594Z","updatedAt":"2022-07-26T23:34:50.594Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":31,"attributes":{"tag":"Technology","createdAt":"2022-10-11T22:15:13.415Z","updatedAt":"2022-10-11T22:15:13.415Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null}},{"id":3,"attributes":{"title":"Sharpetronics Inc. Becomes Official","date":"2021-03-17","subheading":"Winding Roads","content":"We as in SharpeTronics Inc. are proud to announce our business is official with the mountain state of West Virginia on March 17, 2021.\n\nWe also have our very own mailbox provided by the beloved Postmaster.\n\nFurthermore, we now have pillars in place to begin building and creating avenues to bee of service with our community. It has been a long road to this point and we have many more to travel.","createdAt":"2022-05-23T22:49:27.194Z","updatedAt":"2022-10-11T22:27:25.997Z","publishedAt":"2022-05-23T22:55:33.074Z","locale":"en","layout":"post","slug":"sharpetronics-inc-becomes-official","banner_image_description":"A pillar with a head holding up the ceiling.","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee","gallery":{"data":[{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}]},"tags":{"data":[{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":5,"attributes":{"tag":"Celebration","createdAt":"2022-05-24T18:36:29.844Z","updatedAt":"2022-07-26T21:37:36.503Z","locale":"en","posts":{"data":[{"id":2,"attributes":{"title":"Welcome To An Appalachian Technology Company","date":"2021-01-03","subheading":"Where light travels at high altitudes.","content":"Welcome to SharpeTronics, where light travels at high altitudes. We are a mountain made company in the Appalachians of West Virginia that strives with software and hardware technologies. We are statewide leaders in our area of expertise and invite you to support local business.\n\nOur mission is to enable a modern web architecture that empowers the user and enables accessibility for both beginners and experts. We are a technology business that challenges the status quo of web development and shares technical knowledge for both local and remote stations.\n\nOur commitment to you is quality satisfaction, affordable and lightweight performance for worldwide availability with no strings attached.\n\nWe provide solutions that create resilient, secure and portable online infrastructure built to last the future, while enabling straight-forward seamless integration's for happy developers and editors alike.\n\nWe say NO to the complex insecurities and inaccessible culture created around hefty JavaScript frameworks like Angular, React or heavy database integration's like WordPress or Joomla. These structures create more resistance than needed and end up crafting solutions that are complicated, costly and unfriendly.\n\nOur web stack delivers headless content management, worldwide availability, resiliency, accessibility and scalability, while maintaining simplicity, affordability and lightning performance. We remove unneeded barriers and strengthen connections between the user and developer.\n\nSome keywords that are associated with our software stack include: JAMstack, progressive web apps (PWA), content management systems (CMS), ecommerce, newsletters and static websites. If you are eager to learn, get in touch or join our team, please contact us via email. We are available 5 days a week Monday - Friday.","createdAt":"2022-05-23T22:45:37.912Z","updatedAt":"2022-10-11T22:16:18.403Z","publishedAt":"2022-05-23T22:46:00.086Z","locale":"en","layout":"post","slug":"welcome-to-an-appalachian-technology-company","banner_image_description":"An image of the night sky in West Virginia.","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":46,"attributes":{"name":"optimus-primed.jpeg","alternativeText":"optimus-primed.jpeg","caption":"optimus-primed.jpeg","width":1536,"height":2048,"formats":{"thumbnail":{"name":"thumbnail_optimus-primed.jpeg","hash":"thumbnail_optimus_primed_886bcb1942","ext":".jpeg","mime":"image/jpeg","path":null,"width":117,"height":156,"size":5.47,"url":"/uploads/thumbnail_optimus_primed_886bcb1942.jpeg"}},"hash":"optimus_primed_886bcb1942","ext":".jpeg","mime":"image/jpeg","size":607.28,"url":"/uploads/optimus_primed_886bcb1942.jpeg","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-13T21:36:24.316Z","updatedAt":"2022-09-13T21:36:24.316Z"}}},"localizations":{"data":[]}}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":46,"attributes":{"name":"optimus-primed.jpeg","alternativeText":"optimus-primed.jpeg","caption":"optimus-primed.jpeg","width":1536,"height":2048,"formats":{"thumbnail":{"name":"thumbnail_optimus-primed.jpeg","hash":"thumbnail_optimus_primed_886bcb1942","ext":".jpeg","mime":"image/jpeg","path":null,"width":117,"height":156,"size":5.47,"url":"/uploads/thumbnail_optimus_primed_886bcb1942.jpeg"}},"hash":"optimus_primed_886bcb1942","ext":".jpeg","mime":"image/jpeg","size":607.28,"url":"/uploads/optimus_primed_886bcb1942.jpeg","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-13T21:36:24.316Z","updatedAt":"2022-09-13T21:36:24.316Z"}}},"localizations":{"data":[]}}},{"id":5,"attributes":{"createdAt":"2022-10-01T17:23:40.926Z","updatedAt":"2022-11-02T15:38:58.561Z","publishedAt":"2022-10-01T17:24:34.184Z","date":"2022-10-21","quantity":3,"description":"A place to describe the product to your readers.","weight":"3","is_featured":true,"slug":"another-productt","locale":"en","layout":"product","subheading":"another producttatastasatdfg s","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-dragon","unit_price":4,"currency_type":"USD","shipping_price":4,"shipping_companies":"UPS","heading":"another productt","gallery":{"data":[{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}},{"id":53,"attributes":{"name":"312934415_1159579084970698_4992277526963175821_n.jpg","alternativeText":"312934415_1159579084970698_4992277526963175821_n.jpg","caption":"312934415_1159579084970698_4992277526963175821_n.jpg","width":554,"height":554,"formats":{"thumbnail":{"name":"thumbnail_312934415_1159579084970698_4992277526963175821_n.jpg","hash":"thumbnail_312934415_1159579084970698_4992277526963175821_n_9b7c7c21a4","ext":".jpg","mime":"image/jpeg","path":null,"width":156,"height":156,"size":5.8,"url":"/uploads/thumbnail_312934415_1159579084970698_4992277526963175821_n_9b7c7c21a4.jpg"}},"hash":"312934415_1159579084970698_4992277526963175821_n_9b7c7c21a4","ext":".jpg","mime":"image/jpeg","size":34.95,"url":"/uploads/312934415_1159579084970698_4992277526963175821_n_9b7c7c21a4.jpg","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T15:37:58.320Z","updatedAt":"2022-11-02T15:37:58.320Z"}},{"id":54,"attributes":{"name":"West_Virginia_state_coat_of_arms_(illustrated,_1876).jpg","alternativeText":"West_Virginia_state_coat_of_arms_(illustrated,_1876).jpg","caption":"West_Virginia_state_coat_of_arms_(illustrated,_1876).jpg","width":1024,"height":976,"formats":{"thumbnail":{"name":"thumbnail_West_Virginia_state_coat_of_arms_(illustrated,_1876).jpg","hash":"thumbnail_West_Virginia_state_coat_of_arms_illustrated_1876_1f0b28a5ea","ext":".jpg","mime":"image/jpeg","path":null,"width":164,"height":156,"size":7.47,"url":"/uploads/thumbnail_West_Virginia_state_coat_of_arms_illustrated_1876_1f0b28a5ea.jpg"}},"hash":"West_Virginia_state_coat_of_arms_illustrated_1876_1f0b28a5ea","ext":".jpg","mime":"image/jpeg","size":349.95,"url":"/uploads/West_Virginia_state_coat_of_arms_illustrated_1876_1f0b28a5ea.jpg","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T15:38:04.905Z","updatedAt":"2022-11-02T15:38:04.905Z"}},{"id":52,"attributes":{"name":"State_coat_of_arms_of_the_Netherlands.svg.png","alternativeText":"State_coat_of_arms_of_the_Netherlands.svg.png","caption":"State_coat_of_arms_of_the_Netherlands.svg.png","width":756,"height":595,"formats":{"thumbnail":{"name":"thumbnail_State_coat_of_arms_of_the_Netherlands.svg.png","hash":"thumbnail_State_coat_of_arms_of_the_Netherlands_svg_da215b8e7d","ext":".png","mime":"image/png","path":null,"width":198,"height":156,"size":65.68,"url":"/uploads/thumbnail_State_coat_of_arms_of_the_Netherlands_svg_da215b8e7d.png"}},"hash":"State_coat_of_arms_of_the_Netherlands_svg_da215b8e7d","ext":".png","mime":"image/png","size":427.27,"url":"/uploads/State_coat_of_arms_of_the_Netherlands_svg_da215b8e7d.png","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T15:37:47.755Z","updatedAt":"2022-11-02T15:37:47.755Z"}}]},"tags":{"data":[]},"category":{"data":{"id":4,"attributes":{"name":"Legal","createdAt":"2022-05-23T23:43:35.164Z","updatedAt":"2022-05-23T23:43:35.164Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"localizations":{"data":[]}}},{"id":7,"attributes":{"createdAt":"2022-10-02T20:09:10.482Z","updatedAt":"2022-10-02T20:36:28.772Z","publishedAt":"2022-10-02T20:10:07.537Z","date":"2022-10-04","quantity":1,"description":"A place to describe the product to your readers.","weight":"1lb","is_featured":true,"slug":"i-am-a-bananna-product","locale":"en","layout":"product","subheading":"my sppooon is too beiigg","material_type":"gold","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":true,"country_origin":"USA","is_software":false,"banner_image_description":"a short desc. about the banner image","webpage_url":"www.dash.sharpetronics.com","unit_price":1,"currency_type":"USD","shipping_price":1,"shipping_companies":"UPS","heading":"I am a bananna product","gallery":{"data":[{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}]},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null,"banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}}]},"product":{"data":{"id":7,"attributes":{"createdAt":"2022-10-02T20:09:10.482Z","updatedAt":"2022-10-02T20:36:28.772Z","publishedAt":"2022-10-02T20:10:07.537Z","date":"2022-10-04","quantity":1,"description":"A place to describe the product to your readers.","weight":"1lb","is_featured":true,"slug":"i-am-a-bananna-product","locale":"en","layout":"product","subheading":"my sppooon is too beiigg","material_type":"gold","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":true,"country_origin":"USA","is_software":false,"banner_image_description":"a short desc. about the banner image","webpage_url":"www.dash.sharpetronics.com","unit_price":1,"currency_type":"USD","shipping_price":1,"shipping_companies":"UPS","heading":"I am a bananna product"}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":9,"attributes":{"tag":"SSL","createdAt":"2022-05-24T18:43:26.849Z","updatedAt":"2022-05-24T18:43:26.849Z","locale":"en","posts":{"data":[{"id":5,"attributes":{"title":"Linux VPS Hardening","date":"2021-07-26","subheading":"Initializing a secure environment","content":"### Planting Seeds\n\nAdministration of a virtual private Linux server (VPS) without a GUI cpanel is the only way to go. Going through any graphical user interface (GUI) to run critical services for your company is like playing the telephone game. Securing our environment begins at the terminal & from terminal experience we create a deeper learning experience for ourselves and build confidence along the way.\n\nThis article will extrapolate on initializing a Ubuntu Linux VPS for the first time and how we secure our environment through the terminal. No Windows or MacOS pancakes here; only Linux.\n\nWhen beginning a new server or garden, the soil is most important; we create an environment to protect and maximize growth potential. The VPS provider may give you an OS they installed, but I always create a fresh install myself.\n\n### Logging in via SSH\n\n##### Creating RSA Public Key\nBefore you are able to login with SSH, you will most likely have to generate and add a RSA public key.\n\n`ssh-keygen -t rsa -b 4096`\n\n##### Copy / Paste Public Key\nAfter key is generated, we display the public key and add it to VPS account. *Optionally, you may have to add the key with ssh-copy-id user@ip_address.*\n\n`cat ~/.ssh/id_rsa.pub`\n\n```\nssh-rsa AAAEXAMPLECAQDBn0Z88lqrtya0Nd7yYtP/1o90vwVxjvCm/txb+SW85JRRnrI616d2iWwtVCSiUX0s59FfIPxUJl6vPqmxY40DIrX9KZijVpaq/TzWXh2ktCTjT6uBNMBRz/2lxP3w2AZov65dygjW5eQT9K9YB13dr1B4RkQMmUW5xiFbdHM0WzBYM2CMtE+lnmebn7m+B3DcvNkuGdT9Qw1/J24dTuNJSzJXVxzTOTlnVKOVSp1NWzu0USFI6dkrz8YImSgP9hQX970zTnzQ1Ctei4xlR/IiCpVGG6zWeV4oT3sLf4E9mk9eYF/wU0AdA3mQ68yZvv+Bhlc75e9kmUFe+JbctKR4YaKGY6K6K/F1tHrKYkASEkfQQ0KJU/ez/wtSf21A6Z2bM/Gg28f/6owfIMPWnYuB9VOLqkdIHFUot40uMi9CBvkdwH69zAQfz4jFvmu588klE0usBclGAFs78KM6YWaXHYjHdWVRIUrAqdZw1IP0uYS3uSBUPsbBG/Aq0V+22dg8U5DSu5XmwLB5jT+3c4ScqH3kY5tomRLe+2Dx4K+mAHpgtf10xL6Ayx2y0GFZCf+LB1Va3Trk3ChcaKRF5KvyayFQNSY4AfA47B90asdv== user@hostname\n```\n\n##### SSH into VPS\nNext, we login to our VPS and specify -i what key to use. The -i is only needed if you have more than one key. The -v displays verbose or details of what the command is doing in the terminal.\n\n`ssh -i ~/.ssh/id_rsa root@123.123.123.123`\n\nSuccess! Now, we are able to update and upgrade our packages.\n\n### Prepping Linux Environment\n\n##### Update Sources & Packages\n`apt-get update && apt-get upgrade`\n\n##### Disable Ubuntu Sudo Timeout\nIn Ubuntu, sudo has a timeout built in for ease of use. I personally remove this timeout; without knowing you are using sudo will create all kinds of headaches in the future. When you make use of root privileges, we must explicitly type sudo each command.\n\n`sudo visudo`\n\nadd `Defaults        env_reset, timestamp_timeout=00`\n\n### Setting Up The Firewall\nAfter we have logged in via SSH for root user account. I recommend installing a powerful firewall called: **ufw**\n\n`apt-get install ufw`\n\n`ufw status`\n\n`ufw allow ssh`\n\nDisplay the status of the firewall and determine if ssh has been allowed. If nomenclature *ssh* doesn't add the ports, we do this manually with ufw allow 22/udp & ufw all 22/tcp. Port 22 is the common port SSH server makes use of; we are able to change this port for extra hardening, but for the sake of this tutorial, we will use port 22.\n`ufw status`\n\n```\nTo                         Action      From\n--                         ------      ----\n22/tcp                     ALLOW        Anywhere                  \n22/udp                     ALLOW        Anywhere\n```\n\nNow, we enable the firewall **after** we allow port 22. The SSH connection should remain open. If it closes, SSH back into your VPS.\n`ufw enable`\n\n##### Check If Port Is Open\nOnce telnet is ran, ssh information should populate\n`telnet 123.123.123.123 22`\n\n```\nTrying 123.123.123.123...\nConnected to 123.123.123.123.\nEscape character is '^]'.\nSSH-X.0-OpenSSH_X.2p1 Ubuntu-Xubuntu0.2\n\nInvalid SSH identification string.\nConnection closed by foreign host.\n```\n\n### Creating New Users & Permissions\n\nTo further expand on the garden, we must define a secure space for each plant or service we are running. To manage each service, like dns, mail, gitea, etc... we create a new user for each of these environments. This separation is important for operational security (OPSEC).\n\n`adduser username` *Note: If we want to use Dockerfile or auto script without prompts, we make use of the **useradd** command.*\n\n```\nAdding user `username' ...\nAdding new group `username' (1003) ...\nAdding new user `username' (1002) with group `username' ...\nCreating home directory `/home/username' ...\nCopying files from `/etc/skel' ...\nNew password: \n```\n\nNext, if the user should have sudo permission, we do the following.\n\n`usermod -a -G sudo username`\n\n##### Prove User was Created\n\n`cat /etc/passwd`\n\n```\n...\nusername:x:1001:1002:User Name,,,:/home/username:/bin/bash\n...\n```\n\n##### Logging In with New Username\n\n`su username`\n\n##### Update SSH Config\n`sudo nano /etc/ssh/sshd_config`\n\nAdd sudo to the **AllowGroups** like so:\n\n`AllowGroups wheel root sudo`\n\nNext, we disable root login since we will only have root privileges when using sudo.\n\n`PermitRootLogin no`\n\n##### SSH Directory Creation For New Username\nCreating new user access to SSH login.\nWhen you connect to new username@ip, the vps user needs the public key for verification of authorized user. Authorized users with correct **private key** will be able to login to vps via ssh protocol.\n\n`mkdir ~/.ssh`\n\n`nano ~/.ssh/authorized_keys`\n\nPaste your public key we created earlier into the authorized_keys file.\n\n##### Update file & folder permissions\n\n`chmod 700 ~/.ssh`\n\n`chmod 600 ~/.ssh/authorized_keys`\n\n##### Restart SSH service\n\n`sudo service ssh restart`\n\n`exit`\n\nIn conclusion, we are now able to login via SSH with new user and have also disabled root user logins.\nThis process will have to be done for each user that is created.\n\n### Backups with Rsync Superpowers!\n\nAfter all our hard work and focus, we should backup our VPS and create scheduled routines. Depending on your use case, I would recommend at least weekly backups.\n\nThe following command is quite complex, but, essentially we are discarding folders we don't need, backing up the entire VPS to our local machine and preserving all permissions and file integrity from the VPS.\n\n- rsync - A fast, versatile, local and remote file-copying utility\n- -aAXv - The files are transferred in \"archive\" mode, which ensures that symbolic links, devices, permissions, ownerships, modification times, ACLs, and extended attributes are preserved.\n- / - Source directory\n- --exclude - Excludes the given directories from backup.\n\n```\nsudo rsync -aAXv --rsh=\"ssh -i /home/user/.ssh/id_rsa\" --recursive --progress --exclude={\"/dev/*\",\"/proc/*\",\"/sys/*\",\"/tmp/*\",\"/run/*\",\"/mnt/*\",\"/media/*\",\"/lost+found\",\"/backups/*\"} user@123.123.123.123:/ /home/user/VPS/Backups/\n```\n\n#### Sources:\n* Full System Backup Using Rsync - <https://wiki.archlinux.org/title/Rsync#Full_system_backup>\n","createdAt":"2022-05-24T18:46:21.906Z","updatedAt":"2022-10-11T22:10:34.668Z","publishedAt":"2022-05-24T18:46:31.369Z","locale":"en","layout":"post","slug":"linux-vps-hardening","banner_image_description":"The back of a black hoodie hacking at software","comments":null,"name":null}},{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":12,"attributes":{"title":"How to Setup a Docker Drone CI with HTTPS","date":"2022-06-23","subheading":"Obiwon Can Oh Be! A digital C3-PO working beside you!","content":"> R2D2, you know better than to trust a strange computer! [beeps]\n\nIn general, this Drone server enables continuous integration (CI) and is a stepping stone for continuous delivery (CD), including gh-pages and gh-actions like functionality.\n\nFor this to function correctly, you will need to have a working instance of Gitea running on your own system.\n\nThis tutorial doesn't guide you on how-to create your own HTTPS server using Let's Encrypt and Certbot. I have added the certbot resource below [Setting Up HTTPS Certs] I will document this in more detail in the near future. However, this article is similar to how to get https on your server setup.\n[How-to get HTTPS on your server](https://sharpetronics.com/blog/tutorials/2021/12/27/setup-nginx-https-web-server-with-lets-encrypt-plus-strapi-4.0-headless-cms/)\n\nAs a stack developer and business owner, I am working on so many things! It is difficult to remember everything, so documentation is critical for me to remember.\n\n**Note 1:** If you see a [name-goes-here], I am linking to the references shared at the end of the article.\n**Note 2:** Be sure your firewall `sudo ufw status` allows port 80 and 443. `sudo ufw allow http` && `sudo ufw allow https`.\n**Note 3:** If you want to use Docker Engine without sudo, follow this url: [Linux Docker Post-Install](https://docs.docker.com/engine/install/linux-postinstall/)\n\n### Requirements\n- Basic Linux CLI knowledge\n- A hardened remote SSH server [see Linux VPS hardening](https://sharpetronics.com/blog/tutorials/2021/07/26/linux-vps-hardening-init/)\n- A running Gitea server: Git with a cup of tea\n- [Docker Engine](https://docs.docker.com/engine/install/)\n- a basic understanding of how to use Docker Engine\n- basic Nginx, Gitea and Certbot/Let's Encrypt experience\n- openssl\n\n### Let's Begin!\n\n#### Preparing the Environment\n\n##### Creating our super-duper-shared secret\n```\nopenssl rand -hex 16\nbea26a2221fd8090ea38720fc445eca6\n```\n\n##### Creating an OAuth application on Gitea\n1. Goto your git.example.com and login\n2. Navigate to your profile settings (not the administrator settings, but personal profile)\n3. At the top below the main navigation bar, click on **Applications**\n4. Scroll down to the bottom of the page and create a new App name and Redirect URI\n```\nApplications Name: drone\nRedirect URI: https://drone.example.com/login\n```\n5. Click **Create Application**\n6. Copy and save your **Client Secret**; you will only be able to see this secret one time.\n7. In the next section, we will use these credentials to authenticate with Gitea and launch the Drone server.\n\n#### Create & configure the Docker Container\n\n##### Download docker drone image from Dockerhub\n`docker pull drone/drone:2`\n`docker image`\n\n##### Begin configuring and starting drone\n\n*The below command creates a container and starts the Docker runner. Remember to replace the environment variables below with your Drone server details.*\n```\ndocker run \\\n  --volume=/var/lib/drone:/data \\\n  --env=DRONE_TLS_AUTOCERT=true \\\n  --env=DRONE_HTTP_SSL_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_TEMPORARY_REDIRECT=true \\\n  --env=DRONE_HTTP_SSL_HOST=drone.example.com \\\n  --env=DRONE_HTTP_STS_SECONDS=315360000 \\\n  --env=DRONE_SERVER_CERT=/etc/letsencrypt/live/drone.example.com/fullchain.pem \\\n  --env=DRONE_SERVER_KEY=/etc/letsencrypt/live/drone.example.com/privkey.pem \\\n  --env=DRONE_GITEA_SERVER=https://git.example.com \\\n  --env=DRONE_GITEA_CLIENT_ID=e69c443c-6bc2-4a35-000b-a2f36a885400 \\\n  --env=DRONE_GITEA_CLIENT_SECRET=3aY2000000c2Np7zX4e1Z9nlYhelENfX7nmWyxsgVixRg \\\n  --env=DRONE_RPC_SECRET=bea26a2221fd80900000038720fc445eca6 \\\n  --env=DRONE_SERVER_HOST=drone.example.com \\\n  --env=DRONE_SERVER_PROTO=https \\\n  --env=DRONE_USER_FILTER=gitea-user-account \\\n  --publish=80:80 \\\n  --publish=443:443 \\\n  --restart=always \\\n  --detach=true \\\n  --name=st-drone-ssl \\\n  drone/drone:2\n ```\n\n###### Going the extra yards\nAfter you create the docker container, it will automatically restart to remember your configuration, but if you create a shell script, you are able to `./shell-script.sh` and run the Docker image.\n\n```\nvi shell-script.sh\ncopy/paste docker config via CTRL+SHIFT+V\ndouble check for typos\nhit ESC\npress SHIFT+Z,Z (saves and quits)\nchmod +x shell-script.sh (makes script executable)\nthen, run the script with: ./shell-script.sh\n```\n\n#### Verify\n```\ndocker logs st-drone-ssl\n\nINFO[0000] starting the server\nINFO[0000] successfully pinged the remote server\n```\n\n#### Stop & Start Container\n```\nsudo docker container stop st-drone-ssl\nsudo docker container start st-drone-ssl\n```\n\n### Part II - Configure a Drone Runner Pipeline with Docker Engine\n\nThis article will be shared at a later date.\n\n### References\n\n- [Setting up HTTPS certs](https://certbot.eff.org/instructions)\n- [Drone Configuration Options](https://docs.drone.io/server/reference/)\n- [Drone Gitea Setup](https://docs.drone.io/server/provider/gitea/)\n- [Drone Server Docker Installation](https://docs.drone.io/server/provider/gitea/)\n- [What is CI/CD](https://www.infoworld.com/article/3271126/what-is-cicd-continuous-integration-and-continuous-delivery-explained.html)\n- [Unsplash - Studbee](https://unsplash.com/@studbee)\n\n### Support\n\nIf you have any questions, concerns, want to say hi, please join the following channel: [SharpeTronics Discord Support Channel]({{ site.data.social.discord_invite }}) Eventually, I plan on having a commenting system on here..\n\n### Donations\nRecently, I have had many folk as about **how to send me a donation**. If you want to give back andor support my efforts, I have shared various ways to donate. Thank You!\n\n- [Cash App]({{ site.data.payment.cashapp_acct }})\n- [Venmo]({{ site.data.payment.venmo_acct }})\n- [Open Collective]({{ site.data.payment.open_collective }})\n","createdAt":"2022-06-28T04:52:56.626Z","updatedAt":"2022-10-11T22:04:01.861Z","publishedAt":"2022-06-28T04:54:14.470Z","locale":"en","layout":"post","slug":"how-to-setup-a-docker-drone-ci-with-https","banner_image_description":"r2d2 and Luke lego people standing on a laptop","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}},{"id":19,"attributes":{"tag":"JAMstack","createdAt":"2022-05-24T19:03:16.627Z","updatedAt":"2022-06-28T05:02:47.969Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":{"id":7,"attributes":{"createdAt":"2022-10-02T20:09:10.482Z","updatedAt":"2022-10-02T20:36:28.772Z","publishedAt":"2022-10-02T20:10:07.537Z","date":"2022-10-04","quantity":1,"description":"A place to describe the product to your readers.","weight":"1lb","is_featured":true,"slug":"i-am-a-bananna-product","locale":"en","layout":"product","subheading":"my sppooon is too beiigg","material_type":"gold","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":true,"country_origin":"USA","is_software":false,"banner_image_description":"a short desc. about the banner image","webpage_url":"www.dash.sharpetronics.com","unit_price":1,"currency_type":"USD","shipping_price":1,"shipping_companies":"UPS","heading":"I am a bananna product","gallery":{"data":[{"id":41,"attributes":{"name":"c3po-a-friend-in-need.webp","alternativeText":"c3po-a-friend-in-need.webp","caption":"c3po-a-friend-in-need.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_c3po-a-friend-in-need.webp","hash":"thumbnail_c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.17,"url":"/uploads/thumbnail_c3po_a_friend_in_need_74a237a413.webp"}},"hash":"c3po_a_friend_in_need_74a237a413","ext":".webp","mime":"image/webp","size":69.93,"url":"/uploads/c3po_a_friend_in_need_74a237a413.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.722Z","updatedAt":"2022-07-27T01:16:22.722Z"}}]},"tags":{"data":[{"id":2,"attributes":{"tag":"Nginx","createdAt":"2022-05-23T22:52:52.842Z","updatedAt":"2022-05-23T22:53:02.776Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}}]},"product":{"data":{"id":7,"attributes":{"createdAt":"2022-10-02T20:09:10.482Z","updatedAt":"2022-10-02T20:36:28.772Z","publishedAt":"2022-10-02T20:10:07.537Z","date":"2022-10-04","quantity":1,"description":"A place to describe the product to your readers.","weight":"1lb","is_featured":true,"slug":"i-am-a-bananna-product","locale":"en","layout":"product","subheading":"my sppooon is too beiigg","material_type":"gold","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":true,"country_origin":"USA","is_software":false,"banner_image_description":"a short desc. about the banner image","webpage_url":"www.dash.sharpetronics.com","unit_price":1,"currency_type":"USD","shipping_price":1,"shipping_companies":"UPS","heading":"I am a bananna product"}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"localizations":{"data":[]}}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":2,"attributes":{"name":"Company","createdAt":"2022-05-23T22:36:07.950Z","updatedAt":"2022-05-23T22:36:07.950Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":31,"attributes":{"name":"santa-rudolph-unsplash.webp","alternativeText":"santa-rudolph-unsplash.webp","caption":"santa-rudolph-unsplash.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_santa-rudolph-unsplash.webp","hash":"thumbnail_santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.82,"url":"/uploads/thumbnail_santa_rudolph_unsplash_0ae8e3d5a7.webp"}},"hash":"santa_rudolph_unsplash_0ae8e3d5a7","ext":".webp","mime":"image/webp","size":120.3,"url":"/uploads/santa_rudolph_unsplash_0ae8e3d5a7.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-10T00:03:13.317Z","updatedAt":"2022-07-10T00:03:13.317Z"}}},"localizations":{"data":[]}}},{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-10-05T23:44:48.110Z","publishedAt":"2022-10-05T22:35:59.376Z","date":"2022-09-01","quantity":2,"description":"A place to describe the product to your readers. af asd","weight":"1oz","is_featured":false,"slug":"chicken-platter","locale":"en","layout":"product","subheading":"sadfasdf","material_type":"e.g. gold and silver","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"currency_type":"USD","shipping_price":2,"shipping_companies":"UPS","heading":"chicken platter","gallery":{"data":[{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}]},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null,"banner_image":{"data":{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}}},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-10-05T23:44:48.110Z","publishedAt":"2022-10-05T22:35:59.376Z","date":"2022-09-01","quantity":2,"description":"A place to describe the product to your readers. af asd","weight":"1oz","is_featured":false,"slug":"chicken-platter","locale":"en","layout":"product","subheading":"sadfasdf","material_type":"e.g. gold and silver","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"currency_type":"USD","shipping_price":2,"shipping_companies":"UPS","heading":"chicken platter"}}},"localizations":{"data":[]}}},{"id":4,"attributes":{"tag":"Strapi","createdAt":"2022-05-23T22:54:08.940Z","updatedAt":"2022-05-23T22:54:08.940Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":2,"attributes":{"createdAt":"2022-09-13T22:41:26.172Z","updatedAt":"2022-10-10T23:34:32.320Z","publishedAt":"2022-09-13T22:41:56.031Z","date":"2022-09-13","quantity":1,"description":"A place to describe the product to your readers. yay changing the data. changing the data yay more data that isn't saving","weight":"1.0lb","is_featured":true,"slug":"new-product-nameeee","locale":"en","layout":"product","subheading":"test again yupy an update","material_type":"e.g. gold and silver","tax_code":"txcd_20030000","package_dimensions":"N/a","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"this is a description","webpage_url":"https://www.sharpetronics.com/products/example","unit_price":2.5,"currency_type":"USD","shipping_price":5,"shipping_companies":"UPS","heading":"new_product_nameeee"}}},"localizations":{"data":[]}}},{"id":18,"attributes":{"tag":"Headless CMS","createdAt":"2022-05-24T19:02:57.051Z","updatedAt":"2022-05-24T19:02:57.051Z","locale":"en","posts":{"data":[{"id":7,"attributes":{"title":"Setup a Secure NGINX HTTPS Web Server with Let's Encrypt + Strapi 4.0 Headless CMS","date":"2021-12-27","subheading":"Static Websites with CMS","content":"## General\nFor this tutorial, we will launch a secure SSL NGINX web server for your website domain example.org and enable an API to be consumed from the subdomain i.e. api.example.org with Strapi 4.0. \n\n*Tip:* For each reference, I add the **[reference name]** in brackets at the end of the \"transmission.\" **[AWK example]**\n \n## Requirements: \n- a Ubuntu Linux 20.04 VPS with SSH access\n- CLI knowledge\n- a registered web domain i.e. example.org\n- Basic knowledge of DNS and managing a VPS with SSH \n\n## Dependencies & Packages\n- NodeJS v12 or v14 (v14 is recommended for Strapi 4.0)\n- Npm v6+ & Yarn (Yarn is optional)\n- Certbot with Let's Encrypt\n- Nano editor\n\n## Prepare Operating System \nLet's Begin! We begin by installing nginx, certbot and verifying versions Strapi needs. Keep in mind, if you are reading this from the future, the versions will change.\n\n### Update System\n\n```sudo apt update```\n\n### Install Nginx Certbot Packages\n\n```sudo apt install certbot python3-certbot-nginx```\n\n### Install NGINX & verify version \n\n```sudo apt install nginx```\n\n```node -v && nginx -v```\n\n**Tip:** Strapi recommends nodejs v14, but v12 works.\n\n### Install Yarn (Corepack) \n```npm i -g corepack``` **[Install Yarn]**\n\n## Configure NGINX \nNext, we will configure your newly installed Nginx server. By default the configurations are located at: /etc/nginx/ & /etc/nginx/sites-available/. To keep things tidy and organized, we create a new api.example.org conf for each domain we are publicly facing to WWW. \n\n### Make Directory & Copy Default HTML page \n\n```sudo mkdir -p /var/www/api.example.org/html/```\n\n```sudo cp -R /var/www/html/index.nginx-debian.html /var/www/api.example.org/html/index.html```\n\n### Duplicate Default Config \n\n```sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/api.example.org```\n\n### Update NGINX api.example.org Config File\n\nThe **Proxy Config** is important and allows the Strapi 4.0 server to run with nginx. In general, the rest allows SSL and redirects all HTTP traffic to HTTPS, plus denies automated user-agents like wget.\n```\nserver {\n        # Redirect all HTTP requests to HTTPS\n        listen 80;\n        server_name _;\n        return 301 https://$host$request_uri;\n\n        # Deny Automated User-Agents\n        if ($http_user_agent ~* (netcrawl|npbot|malicious|LWP::Simple|BBBike|wget)) {\n        return 403;\n        }\n}\n\nserver {\n    # Listen HTTPS\n    listen 443 ssl http2; # managed by Certbot\n    listen [::]:443 ssl http2;\n    server_name api.example.org www.api.example.org;\n\n    # sites document root\n    root /var/www/api.example.org/html;\n    index index.html index.htm;\n\n    # SSL Config\n    ssl_certificate /etc/letsencrypt/live/api.example.org/fullchain.pem; # managed by Certbot\n    ssl_certificate_key /etc/letsencrypt/live/api.example.org/privkey.pem; # managed by Certbot\n    include /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\n    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot\n\n    # Proxy Config\n    location / {\n        proxy_pass http://strapi;\n        proxy_http_version 1.1;\n        proxy_set_header X-Forwarded-Host $host;\n        proxy_set_header X-Forwarded-Server $host;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        proxy_set_header X-Forwarded-Proto $scheme;\n        proxy_set_header Host $http_host;\n        proxy_set_header Upgrade $http_upgrade;\n        proxy_set_header Connection \"Upgrade\";\n        proxy_pass_request_headers on;\n    }\n\n}\n\n```\n``` CTRL+X, then Y for Yes to save```\n\n### Symbolic Link to sites-enabled\nThis creates a 'mirror' like reference to the sites-available folder. \n\n```sudo ln -s /etc/nginx/sites-available/api.exampleorg /etc/nginx/sites-enabled/```\n\n#### Verify Symbolic Link \n```ls /etc/nginx/sites-enabled/```\n\n## DNS Configuration\nWe now point our domain to the server we are hosting our Strapi on. i.e. 123.123.1.1\n\n### Update DNS Settings\nDepending on your DNS provider or maybe you have your own Domain Name Server, we point our DNS settings for example.org to 123.123.1.1 as type A. I personally recommend Cloudflare.\n\n## Create SSL Certs\nWe run the automated tool Certbot and create all the needed files and update our *api.example.org* configuration file. \n\n### Run Certbot\n```sudo  certbot --nginx```\n\n```Choose api.example.org for the site to create certs. for.```\n\n```Choose option 1 to disable auto redirect HTTP traffic to HTTPS since we already redirected the traffic manually.```\n\n**Note** sudo certbot renew --dry-run will test for automatic renewal for your certs. [Certbot Insturctions]\n\n### Verify api.example.org Updated with Correct Domain\n\n```sudo nano /etc/nginx/sites-enabled/api.example.org```\n\n### Test Config & Restart Nginx\n\n```sudo nginx -t```\n\n```sudo systemctl restart nginx```\n\n## Firewall Configuration\nAllow public to connect via HTTPS, we need to open up ports 80 & 443 (HTTP & HTTPS).\n\n### Allow UFW Ports for Public Traffic\n```sudo ufw allow HTTPS```\n\n```sudo ufw allow HTTP```\n\n### Verify Status & Reload UFW\n```sudo ufw status```\n\n```sudo ufw reload```\n\n**Tip** sudo ufw allow 'Nginx Full' opens both port 80 & 443 (For SSL / TLS encryption).\n\n## Getting Started with Strapi\nNow, we must install Strapi 4.0 on the server and launch the Strapi server.\n\n### Strapi Default Installation\nGoto desired place to install Strapi project i.e. ~/development/my-strapi-project, then,\n\n```yarn create strapi-app my-project```\n\n**Note:** The default Strapi installation uses SQLite as the database. You are able to use other databases like PostgreSQL. See **[Strapi Installation]** for more details.\n\n### Launch Strapi Development Server\n\n```yarn develop```\n\n### Launch Strapi from Domain URL \n\n```Goto: api.example.com via web browser of your choice.```\n\n```Follow the instructions and continue creating a new Strapi administrator.```\n\n#### References:\n[Nginx Strapi Configuration](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment/optional-software/nginx-proxy.html#nginx-upstream)\n\n[Strapi Installation](https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/installation/cli.html#creating-a-strapi-project)\n\n[Nginx Server Blocks](https://www.digitalocean.com/community/tutorials/how-to-set-up-nginx-server-blocks-virtual-hosts-on-ubuntu-16-04)\n\n[Install Yarn](https://yarnpkg.com/getting-started/install)\n\n[Certbot Insturctions](https://certbot.eff.org/instructions?ws=nginx&os=ubuntufocal)\n\n#### Donations Are Welcome\n[Cash App](https://cash.app/$sharpeee)","createdAt":"2022-05-24T19:03:47.148Z","updatedAt":"2022-10-11T22:07:37.794Z","publishedAt":"2022-05-24T19:03:48.499Z","locale":"en","layout":"post","slug":"setup-a-secure-nginx-https-web-server-with-let-s-encrypt-strapi-4-0-headless-cms","banner_image_description":"Two feet wearing socks beside each other with faces of Santa Clause and another of Rudolph","comments":null,"name":null}},{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":null},"localizations":{"data":[]}}}]},"gallery":{"data":null},"localizations":{"data":[]}}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-10-05T23:44:48.110Z","publishedAt":"2022-10-05T22:35:59.376Z","date":"2022-09-01","quantity":2,"description":"A place to describe the product to your readers. af asd","weight":"1oz","is_featured":false,"slug":"chicken-platter","locale":"en","layout":"product","subheading":"sadfasdf","material_type":"e.g. gold and silver","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"currency_type":"USD","shipping_price":2,"shipping_companies":"UPS","heading":"chicken platter","gallery":{"data":[{"id":47,"attributes":{"name":"code.webp","alternativeText":"code.webp","caption":"code.webp","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_code.webp","hash":"thumbnail_code_2b5ed5fa9c","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":7.08,"url":"/uploads/thumbnail_code_2b5ed5fa9c.webp"}},"hash":"code_2b5ed5fa9c","ext":".webp","mime":"image/webp","size":61.87,"url":"/uploads/code_2b5ed5fa9c.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-09-25T15:57:03.655Z","updatedAt":"2022-09-25T15:57:03.655Z"}},{"id":42,"attributes":{"name":"r2d2-skywalker.webp","alternativeText":"r2d2-skywalker.webp","caption":"this is an update after image upload to Caption; does filename change?","width":840,"height":560,"formats":{"thumbnail":{"name":"thumbnail_r2d2-skywalker.webp","hash":"thumbnail_r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","path":null,"width":234,"height":156,"size":5.05,"url":"/uploads/thumbnail_r2d2_skywalker_c84e2364fe.webp"}},"hash":"r2d2_skywalker_c84e2364fe","ext":".webp","mime":"image/webp","size":57.35,"url":"/uploads/r2d2_skywalker_c84e2364fe.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-27T01:16:22.740Z","updatedAt":"2022-09-25T15:53:09.698Z"}}]},"tags":{"data":[{"id":3,"attributes":{"tag":"Jekyll","createdAt":"2022-05-23T22:53:53.119Z","updatedAt":"2022-05-23T22:53:53.119Z","locale":"en","posts":{"data":[{"id":14,"attributes":{"title":"Update your Strapi CMS with your own Favicon","date":"2022-07-12","subheading":"How-to replace the favicon","content":"&nbsp;&nbsp;&nbsp;&nbsp;In this article, we will be replacing the Strapi favicon with your own favicon. This same process is similar to how we replace the login logo `AuthLogo` and menu logo with `MenuLogo`. For more details, please visit Strapi documentations example configuration. [Strapi Documents] \n\n> **Tip:** This same process may be used to replace the login logo `AuthLogo` and menu logo with `MenuLogo`. \n> For more details, please visit [Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#logos)\n\n1. Create an extensions folder at:\n`src/admin/extensions/`\n\n2. Upload your favicon into:\n`src/admin/extensions/`\n\n3. Replace the **favicon.ico** at:\n`Strapi app root` with custom favicon.ico\n\n4. Update your `src/admin/app.js` with the following:\n\n```\n// path: src/admin/app.js\n\nimport favicon from './extensions/favicon.png';\n\nexport default {\n  config: {\n         // replace favicon with custom icon\n         head: {\n                favicon: favicon,\n        },\n  }\n}\n```\n5. Rebuild, run & revisit your Strapi app\n `yarn build && yarn develop`\n\n> **Note:** \n> Be certain that the cached favicon is cleared. It can be cached in your web browser and also with your domain management\n> tool like Cloudflare's CDN\n\n#### References\n[Strapi Documents](https://docs.strapi.io/developer-docs/latest/development/admin-customization.html#configuration-options)\n","createdAt":"2022-07-26T22:44:54.138Z","updatedAt":"2022-10-15T18:40:33.689Z","publishedAt":"2022-07-26T22:46:38.914Z","locale":"en","layout":"post","slug":"update-your-strapi-cms-with-your-own-favicon","banner_image_description":"computer code matrix","comments":null,"name":null}}]},"product":{"data":{"id":8,"attributes":{"createdAt":"2022-10-05T22:35:56.797Z","updatedAt":"2022-10-05T23:44:48.110Z","publishedAt":"2022-10-05T22:35:59.376Z","date":"2022-09-01","quantity":2,"description":"A place to describe the product to your readers. af asd","weight":"1oz","is_featured":false,"slug":"chicken-platter","locale":"en","layout":"product","subheading":"sadfasdf","material_type":"e.g. gold and silver","tax_code":"txcd_00000000","package_dimensions":"1x1x1mm","shipping_rates":"Standard","is_shippable":false,"country_origin":"USA","is_software":true,"banner_image_description":"a short desc. about the banner image","webpage_url":"https://www.sharpetronics.com/products/2017-02-03-drrragon/","unit_price":2,"currency_type":"USD","shipping_price":2,"shipping_companies":"UPS","heading":"chicken platter"}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"localizations":{"data":[]}}}},"localizations":{"data":[]}}}]},"category":{"data":{"id":3,"attributes":{"name":"How-to","createdAt":"2022-05-23T22:36:20.735Z","updatedAt":"2022-06-25T17:31:07.838Z","locale":"en","localizations":{"data":[]}}}},"author":{"data":{"id":1,"attributes":{"createdAt":"2022-05-23T23:00:27.098Z","updatedAt":"2022-11-02T23:43:42.752Z","locale":"en","name":"Charles","website":"https://sharpetronics.com","short_biography":"🖥️ A Stack Architect, 🦅 A Director, 🎖️ A USAF Veteran, 📜 Intergalactic Confederation, ⚡ ἀγάπηφῶς","twitter_username":"odinzu_me","github_username":"csharpee","avatar_image":{"data":{"id":55,"attributes":{"name":"c-avatar.webp","alternativeText":"c-avatar.webp","caption":"c-avatar.webp","width":200,"height":200,"formats":{"thumbnail":{"name":"thumbnail_c-avatar.webp","hash":"thumbnail_c_avatar_30ba895a14","ext":".webp","mime":"image/webp","path":null,"width":156,"height":156,"size":2.36,"url":"/uploads/thumbnail_c_avatar_30ba895a14.webp"}},"hash":"c_avatar_30ba895a14","ext":".webp","mime":"image/webp","size":18.42,"url":"/uploads/c_avatar_30ba895a14.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-11-02T19:05:28.860Z","updatedAt":"2022-11-02T19:05:28.860Z"}}},"localizations":{"data":[]}}}},"banner_image":{"data":{"id":40,"attributes":{"name":"terms.webp","alternativeText":"terms.webp","caption":"terms.webp","width":461,"height":215,"formats":{"thumbnail":{"name":"thumbnail_terms.webp","hash":"thumbnail_terms_48bec2a697","ext":".webp","mime":"image/webp","path":null,"width":245,"height":114,"size":0.38,"url":"/uploads/thumbnail_terms_48bec2a697.webp"}},"hash":"terms_48bec2a697","ext":".webp","mime":"image/webp","size":7.68,"url":"/uploads/terms_48bec2a697.webp","previewUrl":null,"provider":"local","provider_metadata":null,"createdAt":"2022-07-26T23:49:53.892Z","updatedAt":"2022-07-26T23:49:53.892Z"}}},"localizations":{"data":[]}}}],"meta":{"pagination":{"page":1,"pageSize":25,"pageCount":1,"total":4}}}